/*
 *************************************************************
 *
 *     YaST2      SuSE Labs                        -o)
 *     --------------------                        /\\
 *                                                _\_v
 *           www.suse.de / www.suse.com
 * ----------------------------------------------------------
 *
 * Author:        Cornelius Schumacher <cschum@suse.de>
 *
 * Purpose:
 *
 * Modify:
 *
 * external function:
 *
 *
 *************************************************************

 $Id$

*/

{

  textdomain "online-update";

  import "OnlineUpdate";
  
  boolean auto_mode_install = OnlineUpdate::you_auto_install;

  //////////////////////////////////////////////////////////////////////////////////////
  //                                  P O P U P S                                     //
  //////////////////////////////////////////////////////////////////////////////////////

  global define YouMessagePopup( map patch, boolean pre )
  ``{
      string message = "";
      
      if ( pre ) message = patch[ "preinformation" ]:"";
      else message = patch[ "postinformation" ]:"";

      string detailsStringOn = _("Patch &Details <<");
      string detailsStringOff = _("Patch &Details >>");

      term detailsButton = `PushButton( `id( `details ), detailsStringOff );

      string details = sformat( _("<b>Patch:</b> %1<br>"), patch[ "name" ]:"" );
      
      details = details + sformat( _("<b>Summary:</b> %1<br>"), patch[ "summary" ]:"" );
      
      list packages = patch[ "packages" ]:[];

      details = details + _("<b>Packages:</b>");
        
      details = details + "<ul>";

      foreach( `p, packages, ``{ details = details + "<li>" + p + "</li>"; } );

      details = details + "</ul>";

      term detailsTerm = 
        `HBox( `HSpacing( 0.5 ),
          `HWeight( 1, `RichText( details ) ),
          `HSpacing( 0.5 )
        );
       
      term buttons = nil;
      if ( pre ) {
        buttons = `HBox(
                      detailsButton,
                      `PushButton( `id( `ok ), _("Install patch") ),
                      `PushButton( `id( `skip ), _("Skip patch") )
                  );
      } else {
        buttons = `HBox(
                      detailsButton,
                      `PushButton( `id( `ok ), OKButtonLabel() )
                  );
      }

      UI::OpenDialog( `opt( `decorated ),
          `VBox(
              `VSpacing( 0.2 ),
              `Label( message ),
              `ReplacePoint( `id( `rp ), `Empty() ),
              buttons
          )
      );

      symbol ret = nil;
      boolean showDetails = false;

      while( ret != `ok && ret != `skip ) {
          ret = UI::UserInput();

          if ( ret == `details ) {
              if ( showDetails ) {
                  UI::ReplaceWidget( `id( `rp ), `Empty() );
                  UI::ChangeWidget( `id( `details ), `Label, detailsStringOff );
              } else {
                  UI::ReplaceWidget( `id( `rp ), `HBox( `HSpacing( 0.5 ),
                                                        `HWeight( 1, `RichText( details ) ),
                                                        `HSpacing( 0.5 ) )
                                                       );
                  UI::ChangeWidget( `id( `details ), `Label, detailsStringOn );
              }
              showDetails = !showDetails;
          }
      }

      UI::CloseDialog();

      if ( ret ==  `ok ) return true;
      else return false;
  }    

  //////////////////////////////////////////////////////////////////////////////////////
  // MAIN:
  ///////////////////////////////////////////////////////////////////////////////////////


  term contents =
      // main dialog: 
      `VBox(
	    `VSpacing( 0.2 ),
            `LogView(`id(`log), _("Progress log"), 5, 0 ),
	    `VSpacing( 0.5 ),
            `ProgressBar( `id( `patchprogress ), _("Patch Progress") ),
            `VSpacing( 0.2 ),
            `ProgressBar( `id( `progress ), _("Total Progress") ),
	    `VSpacing( 0.5 ),
	    `Left(`CheckBox(`id(`remove_packages),_("&Remove source packages after update"), false)),
            `VSpacing( 0.2 )
            );
    
  string help_text = "";

  string help_part1 =  _("<p>After connecting to the SuSE update server,
YaST2 will download all selected patches.
This could take some time. Download details are shown in the log window.</p>");

  string help_part2 =  _("<p>When the download succesfully was finished, the
patches will be installed. The progress is shown in the log window. If there
are special messages associated with patches they will be shown in an
extra dialog, when the patch is being installed.</p>");

  string help_part3 = _("<p>After patches are installed the downloaded
data isn't needed anymore. If you want to delete this data, activate the
option <b>Remove source packages after update</b></p>");
 
  help_text = help_part1 + help_part2 + help_part3;
    
  // using SetContents (define in online_update.ycp)
  Wizard::SetContents(_("Patch Download and Installation"), contents, help_text, WFM::Args(0), WFM::Args(1) );

  Wizard::ReplaceNextButton( `PushButton( `id( `next ), FinishButtonLabel() ) );

  UI::ChangeWidget(`id(`back), `Enabled, false );
  UI::ChangeWidget(`id(`next), `Enabled, false );

  Pkg::YouAttachSource();

  map patch = Pkg::YouFirstPatch();

  boolean error = false;

  // If stop is set to true the update stops, if there are download errors
  boolean stop = false;

  string msgNoPatches = _( "No patches have been selected for installation." );

  integer installedPatches = 0;

  symbol proceed = `ok;

  if ( size( patch ) == 0 ) {
    UI::ChangeWidget( `id(`log), `LastLine, msgNoPatches );
  } else {
    while( size( patch ) != 0 ) {
      y2debug("Patch: %1", patch);
    
      string errorMsg = patch[ "error" ]: "";
      y2debug("ErrorMsg: %1", errorMsg);

      if ( errorMsg == "abort" ) {
        if ( UI::ConfirmAbortUpdate( `painless ) ) return `abort;
      }

      string patchName = lookup( patch, "name", "unknown" );
    
      UI::ChangeWidget( `id(`log), `LastLine,
                        sformat ( _( "Retrieving %1: \"%2\" " ),
                            patchName,
                            lookup( patch, "summary", "no summary" ) ) );

      string err = "skipped";
      if ( proceed == `ok ) {
        err = Pkg::YouGetCurrentPatch( OnlineUpdate::reload,
                                       OnlineUpdate::signature_check );
      }
      
      if ( size( err ) == 0 ) {
        UI::ChangeWidget( `id(`log), `LastLine, _("Ok\n") );
      } else if ( err == "skipped" ) {
        UI::ChangeWidget( `id(`log), `LastLine, _("Skipped\n") );
      } else {
        UI::ChangeWidget( `id(`log), `LastLine, _("Error") );
        error = true;
        if ( err == "abort" ) {
          if ( UI::ConfirmAbortUpdate( `painless ) ) return `abort;
        }
        if ( err == "media" ) {
          UI::ChangeWidget( `id(`log), `LastLine, _(": Can't get files.") );
        } else if ( err == "sig" ) {
          UI::ChangeWidget( `id(`log), `LastLine, _(": Signature check failed.") );
        } else {
          y2error( "YouGetCurrentPatch Error: %1", err );
        }
        UI::ChangeWidget( `id(`log), `LastLine, _("\n") );
      
        string msg = sformat( _("Error downloading patch '%1'.
Do you want to skip this patch or
abort the update?"), patchName );
      
        string errorMsg = Pkg::Error() + "\n" + Pkg::ErrorDetails();

        proceed = UI::YouSkipPopup( msg, errorMsg );
        if ( proceed == `abort ) return `abort;
      }

      patch = Pkg::YouNextPatch();
    }
    
    UI::ChangeWidget( `id(`log), `LastLine, _("Download finished.\n\n") );

    if ( stop ) {
      UI::ErrorPopup( _("Download failed.") );
    } else {
    
      patch =  Pkg::YouFirstPatch( false );

      error = false;
      proceed = `ok;

      if ( size( patch ) == 0 ) {
        UI::ChangeWidget( `id(`log), `LastLine, msgNoPatches );
      } else {
        while( size( patch ) != 0 ) {
          string patchName = lookup( patch, "name", "unknown" );
        
          UI::ChangeWidget( `id(`log), `LastLine,
                            sformat ( _( "Installing %1: \"%2\" " ),
                                patchName,
                                lookup( patch, "summary", "no summary" ) ) );

          string info = lookup( patch, "preinformation", "" );

          boolean install = true;
          
          if ( size( info ) != 0 ) {
            install = YouMessagePopup( patch, true );
          }

          if ( !install ) {
            UI::ChangeWidget( `id(`log), `LastLine, _("Skipped\n") );
          } else {
            string result = "skipped";
            if ( proceed == `ok ) result = Pkg::YouInstallCurrentPatch();

            if ( size( result ) == 0 ) {
              UI::ChangeWidget( `id(`log), `LastLine, _("Ok\n") );
              installedPatches = installedPatches + 1;

              info = lookup( patch, "postinformation", "" );
              
              if ( size( info ) != 0 ) {
                YouMessagePopup( patch, false );
              }
            } else if ( result == "skipped" ) {
              UI::ChangeWidget( `id(`log), `LastLine, _("Skipped\n") );
            } else {
              
              UI::ChangeWidget( `id(`log), `LastLine, _("Error\n") );
              error = true;

              string msg = sformat( _("Error installing patch '%1'.\n
Do you want to skip this patch or abort
the update?"), patchName );

              string errorMsg = Pkg::Error() + "\n" + Pkg::ErrorDetails();

              proceed = UI::YouSkipPopup( msg, errorMsg );
              if ( proceed == `abort ) return `abort;
            }
          }

          patch = Pkg::YouNextPatch();
        }

        UI::ChangeWidget( `id(`log), `LastLine, _("Installation finished.\n") );

        string msg = "";
        if ( installedPatches == 0 ) {
          msg = _( "No patches have been installed.");
        } else if ( installedPatches == 1 ) {
          msg = _( "1 patch has been installed." );
        } else {
          msg = sformat( _( "%1 patches have been installed." ),
                         installedPatches );
        }
        
        UI::ChangeWidget( `id(`log), `LastLine, msg );

        if ( stop ) {
          UI::ErrorPopup( _("Installation failed.") );
        } else {
          Pkg::YouFinish();
        }
      }
    }
  }

  UI::ChangeWidget(`id(`back), `Enabled, true );
  UI::ChangeWidget(`id(`next), `Enabled, true );
  UI::SetFocus(`id(`next));

  if ( installedPatches == 0 ) {
    Wizard::DisableAbortButton();
    Wizard::ReplaceNextButton( `PushButton( `id( `next ), CloseButtonLabel() ) );
    UI::ChangeWidget( `id( `patchprogress ), `Value, 100 );
    UI::ChangeWidget( `id( `progress ), `Value, 100 );
  }

  /////////////////////////////////////////////////////////////////////////////////////////
  ////  Loop for User Input ....
  /////////////////////////////////////////////////////////////////////////////////////////
  symbol ret = `next;

  repeat {
    ret= UI::UserInput();

    if ( ret == `next && UI::QueryWidget(`id(`remove_packages),`Value ) )
    {
        y2debug( "Removing old rpm-packages" );
        Pkg::YouRemovePackages();
    }

    if ( ret == `abort ) {
        if ( !UI::ConfirmAbortUpdate( `suseconfig ) ) ret = `this;
    }

    if ( ret == `next && installedPatches == 0 ) ret = `abort;

  } until (ret == `next || ret == `back || ret == `abort || ret == `again );
    
  return ret;
}
