/*
 *************************************************************
 *
 *     YaST2      SuSE Labs                        -o)
 *     --------------------                        /\\
 *                                                _\_v
 *           www.suse.de / www.suse.com
 * ----------------------------------------------------------
 *
 * Author:        Cornelius Schumacher <cschum@suse.de>
 *
 * Purpose:
 *
 * Modify:
 *
 * external function:
 *
 *
 *************************************************************

 $Id$

*/

{

  textdomain "online-update";

  import "OnlineUpdate";
  
  boolean auto_mode_install = OnlineUpdate::you_auto_install;

  //////////////////////////////////////////////////////////////////////////////////////
  //                                  P O P U P S                                     //
  //////////////////////////////////////////////////////////////////////////////////////

  // None at the moment
    

  //////////////////////////////////////////////////////////////////////////////////////
  // MAIN:
  ///////////////////////////////////////////////////////////////////////////////////////


  term contents =
      // main dialog: 
      `VBox(
	    `VSpacing( 0.2 ),
            `LogView(`id(`log), _("Package Update information"), 5, 0 ),
	    `VSpacing( 0.5 ),
	    `Left(`CheckBox(`id(`remove_packages),_("&Remove source packages after update."), false)),
	    `VSpacing( 0.2 )
	    );
    
  string help_text = "";

  string help_part1 =  _("<p>After connecting to SuSE server,
YaST2 will download all selected patches.
This could take some time. Several details are shown.</p>");

  string help_part2 =  _("<p>When the download succesfully was finished, the
patches will be installed. The progress is shown in the log window. If there
are sepcial messages associated with patches they will be shown in an
extra dialog, when the patch is being installed.</p>");

  string help_part3 = _("<p>After patches are installed the downloaded
data isn't needed anymore. If you want to delete this data, activate the
option 'Remove source packages after update.'</p>");
 
  help_text = help_part1 + help_part2 + help_part3;
    
  // using SetContents (define in online_update.ycp)
  Wizard::SetContents(_("Online Update Confirmation"), contents, help_text, WFM::Args(0), WFM::Args(1) );

  // changing Label to Finish for the last step
  UI::ChangeWidget(`id(`abort), `Enabled,  false );

  Pkg::YouAttachSource();

  map patch = Pkg::YouFirstPatch();

  boolean error = false;
  
  if ( size( patch ) == 0 ) {
    UI::ChangeWidget( `id(`log), `LastLine,
                      _("No new patches available." ) );
  } else {
    while( size( patch ) != 0 ) {
      UI::ChangeWidget( `id(`log), `LastLine,
                        sformat ( _( "Retrieving %1: \"%2\" " ),
                            lookup( patch, "name", "unknown" ),
                            lookup( patch, "summary", "no summary" ) ) );

      string err = Pkg::YouGetCurrentPatch( OnlineUpdate::signature_check );
      if ( size( err ) == 0 ) {
        UI::ChangeWidget( `id(`log), `LastLine, _("Ok\n") );
      } else {
        UI::ChangeWidget( `id(`log), `LastLine, _("Error") );
        error = true;
        if ( err == "media" ) {
          UI::ChangeWidget( `id(`log), `LastLine, _(": Can't get files.") );
        } else if ( err == "sig" ) {
          UI::ChangeWidget( `id(`log), `LastLine, _(": Signature check failed.") );
        } else {
          y2error( "YouGetCurrentPatch Error: %1", err );
        }
        UI::ChangeWidget( `id(`log), `LastLine, _("\n") );
      }

      patch = Pkg::YouNextPatch();
    }
    
    UI::ChangeWidget( `id(`log), `LastLine, _("Download finished.\n\n") );

    if ( error ) {
      UI::ErrorPopup( _("Download failed.") );
    } else {
    
      patch =  Pkg::YouFirstPatch();

      error = false;

      if ( size( patch ) == 0 ) {
        UI::ChangeWidget( `id(`log), `LastLine,
                          _("No patches selected to be installed." ) );
      } else {
        while( size( patch ) != 0 ) {
          UI::ChangeWidget( `id(`log), `LastLine,
                            sformat ( _( "Installing %1: \"%2\" " ),
                                lookup( patch, "name", "unknown" ),
                                lookup( patch, "summary", "no summary" ) ) );

          string info = lookup( patch, "preinformation", "" );
          if ( size( info ) != 0 ) {
            UI::MessagePopup( info );
          }

          boolean ok = Pkg::YouInstallCurrentPatch();
          if ( ok ) {
            UI::ChangeWidget( `id(`log), `LastLine, _("Ok\n") );
          } else {
            UI::ChangeWidget( `id(`log), `LastLine, _("Error\n") );
            error = true;
          }

          info = lookup( patch, "postinformation", "" );
          if ( size( info ) != 0 ) {
            UI::MessagePopup( info );
          }

          patch = Pkg::YouNextPatch();
        }

        UI::ChangeWidget( `id(`log), `LastLine, _("Installation finished.\n") );

        if ( error ) {
          UI::ErrorPopup( _("Installation failed.") );
        } else {
          UI::MessagePopup( _("Installation successful.") );
        }
      }
    }
  }


/*
  // set status and close update
  y2debug("ONLINE: close update with status: %1", OnlineUpdate::you_ok );
  any result = SCR::Execute (.you.closeUpdate,
			     OnlineUpdate::you_ok);

  if ( auto_mode_install )
  {
      // Do not show in auto mode
      return `next;
  }
  
  // Show results
  map last_status = SCR::Read (.you.lastUpdateStatus );
  y2debug( "ONLINE: SCR::Read (.you.lastUpdateStatus ) : %1", last_status );
     
  list patch_list = lookup( last_status, "patches", [] );
  integer rec_no = 0;
  integer sec_no = 0;
  integer yast2_no = 0;
  integer index = 0;
     
  while (index < size(patch_list) )
  {
      if ( select(patch_list, index+4, "") == "installed" )
      {
	  if ( select(patch_list, index+1, "") == "recommended" )    	rec_no = rec_no+1;
	  else if ( select(patch_list, index+1, "") == "security" )    	sec_no = sec_no+1;
	  else if ( select(patch_list, index+1, "") == "YaST2" )	yast2_no = yast2_no+1;
      }
      index = index+5;
  };

  UI::ChangeWidget(`id(`error), `Value, lookup(last_status, "status", "--" ) );
  UI::ChangeWidget(`id(`sec), `Value, sformat("%1", sec_no));
  UI::ChangeWidget(`id(`rec), `Value, sformat("%1", rec_no));
  UI::ChangeWidget(`id(`yast2), `Value, sformat("%1", yast2_no));

*/
     
  /////////////////////////////////////////////////////////////////////////////////////////
  ////  Loop for User Input ....
  /////////////////////////////////////////////////////////////////////////////////////////
  symbol ret = `next;

  repeat
      {
	  ret= UI::UserInput();
/*	
	  if (ret == `details)
	  {

	      any retval = WFM::CallFunction(`online_update_details( true, false ) );
	      // changing Label to Finish for the last step
	      UI::ChangeWidget(`id(`next), `Label,  FinishButtonLabel() );
	      UI::ChangeWidget(`id(`abort), `Enabled,  false );
	      
	      if ( retval == `abort )
	      {
		  SCR::Execute( .you.disconnect );
		  return `abort;
	      }
	    
	      ret = `again;
	  }
*/
	  if ( ret == `next && UI::QueryWidget(`id(`remove_packages),`Value ) )
	  {
	      y2debug( "Removing old rpm-packages" );	    
              Pkg::YouRemovePackages();
	  }

      } until (ret == `next || ret == `back || ret == `abort || ret == `again );

/*
  // Close connection
  SCR::Execute( .you.disconnect );
*/
    
  return ret;
}



