/*
 *************************************************************
 *
 *     YaST2      SuSE Labs                        -o)
 *     --------------------                        /\\
 *                                                _\_v
 *           www.suse.de / www.suse.com
 * ----------------------------------------------------------
 *
 * Author:        Gabriele Strattner <gs@suse.de>
 *
 * Purpose:	start module for you update
 *		display last update info
 *		possibility to choose automatic or manual mode
 * Modify:
 *
 * external function:
 *
 *
 *************************************************************

 $Id$

*/

{
  textdomain "online_update";

  import "Language";
  import "Arch";
  import "Mode";
  import "OnlineUpdate";

  boolean business 	= false;

  // constant settings
  include "suseservers.ycp";

  // you_server_map = $[ "server" : [ "path", "type" ], ... ]

  string rootpath = "/";
  string yastpath = "/var/lib/YaST";
  string patchpath = "/var/lib/YaST/patches";
  string serverdescr_file = "suseservers.txt";


  /////////////////////////////////////////////////////////////////////////////////////
  // MAIN:
  /////////////////////////////////////////////////////////////////////////////////////


  map last_status = $[];

  // Evaluate correct language
  map lang2yast1 =       $[
        "en_GB"         : "english",
        "en_US"         : "english",
        "en"            : "english",
        "de_DE"         : "german",
        "de_CH"         : "german",
        "de"            : "german",
        "fr"            : "french",
        "br_FR"         : "french",
        "fr_FR"         : "french",
        "fr_CH"         : "french",
        "it"            : "italian",
        "it_IT"         : "italian",
        "es"            : "spanish",
        "es_ES"         : "spanish",
        "nl"            : "dutch",
        "nl_NL"         : "dutch",
        "pt"            : "portuguese",
        "pt_PT"         : "portuguese",
        "pt_BR"         : "brazilian",
        "hu"            : "hungarian",
        "hu_HU"         : "hungarian",
        "pl"            : "polish",
        "pl_PL"         : "polish",
        "el_GR"         : "greek",
        "tr_TR"         : "turkish",
        "tr"            : "turkish",
        "ru"            : "russian",
        "ru_RU"         : "russian",
        "ru_RU.KOI8-R"  : "russian",
        "cs"            : "czech",
        "cs_CZ"         : "czech",
        "ja"            : "japanese",
        "ja_JP"         : "japanese",
        "ko"            : "korean",
        "ko_KR"         : "korean"
  ];
  string language = lookup(lang2yast1,  Language::language, "english");

  boolean cd_update 	= OnlineUpdate::cd_update;

  list you_server_list = [];

  // initialize You Agent
  UI::OpenDialog(`opt(`decorated ),`Label(_("Initializing for FTP/HTTP update. One moment please...")));

  any retval = SCR::Execute(.you.setEnvironment, $[ "language":language,
						  "rootpath":rootpath,
						  "architecture":Arch::architecture,
						  "yastpath":yastpath,
						  "patchpath":patchpath] );

  y2debug( "ONLINE: Return  .you.setEnvironment() %1", retval );
  UI::CloseDialog();

  if ( OnlineUpdate::reloadServer != "no" )
  {
      // checking if already exists
      OnlineUpdate::reloadServer =
	  SCR::Read(.sysconfig.onlineupdate.YAST2_LOADFTPSERVER);
      y2milestone ( "YAST2_LOADFTPSERVER = %1", OnlineUpdate::reloadServer );
  }

  // Check whether YOU runs on a business product

  if ( SCR::Read(.you.isBusiness) )
  {
      OnlineUpdate::business = true;
      business = true;
      serverdescr_file = "suseservers_http.txt";
  }

  // only get the suseservers if reloadServer is "yes" and it's not a CD update
  if ( OnlineUpdate::reloadServer != "no" && !cd_update )
  {
      // getting you-server-description from www.suse.de

      OnlineUpdate::reloadServer = "no"; //resetting

      SCR::Execute(.target.bash,"/bin/cp /etc/suseservers /etc/suseservers.bak" );
      string command = "/usr/bin/wget -q --output-document="+
	  "/etc/suseservers --tries=2 --timeout=5 http://www.suse.de/de/support/download/"
	  + serverdescr_file;

      UI::OpenDialog(`opt(`decorated ),`Label(_("Getting available serverlist from www.suse.de ...")));
      sleep( 1000 );

      if ( SCR::Execute(.target.bash, command) != 0  )
      {
	  y2error("command: %1", command);
	  if ( SCR::Read(.you.isBusiness) )
	  {
	      UI::ErrorPopup(_("Cannot connect to www.suse.de. Please check connection."));
	      return  `abort;
	  }
	  else
	  {
	      SCR::Execute(.target.bash,
			   "/bin/cp /etc/suseservers.bak /etc/suseservers" );
	  }
      }
      else
      {
	  y2milestone("command %1 ok", command);
      }
      SCR::Execute(.target.remove,"/etc/suseservers.bak" );
      UI::CloseDialog();
  }

  // read /etc/suseservers
  map you_server_map 	= read_suseservers ();

  y2debug( "/ETC/SUSESERVERS *** initial ***: %1", you_server_map );

  string you_server	= "";
  string you_serverkind = "";
  string you_dir 	= "";

  if ( Mode::youInstallMap != $[] && Mode::youInstallMap["you_serverkind"]:"" != "" )
  {
      you_server 	= Mode::youInstallMap["you_server"]:"";
      you_serverkind 	= Mode::youInstallMap["you_serverkind"]:"";
      you_dir 		= Mode::youInstallMap["you_dir"]:"";
  }
  else
  {
      // if no server/directory is set in Expert mode (inst_source), take the
      // first entry in file /etc/suseservers (instead of "ftp.suse.com/pub/suse")
      you_server     = read_first_suseserver();
      y2debug( "FIRST SERVER: %1", you_server );

      you_serverkind = select( lookup(you_server_map, you_server, ["",""]), 1, "" );
      you_dir        = select( lookup(you_server_map, you_server, ["",""]), 0, "" );
  }

  y2milestone("YOU Server: %1, directory: %2, kind: %3", you_server, you_dir, you_serverkind );

  // insert local server like CD, NFS ....
  if ( Mode::youInstallMap["you_serverkind"]:"" != "" )
  {
      list you_dir_list = [];
      you_dir_list = add ( you_dir_list, you_dir );
      you_dir_list = add ( you_dir_list, you_serverkind );
      you_server_map = add(you_server_map, you_server, you_dir_list );

      y2debug( "/ETC/SUSESERVERS *** extended ***: %1", you_server_map );
  }


  // create list for the combo box installation source
  foreach(`server, `info, you_server_map, ``{
      you_server_list = add(you_server_list, server);
  });


  if (!retval)
  {
      // Message popup: yast2 component responsible for the you update cannot be initialised.
      // This does not mean, connection failed to you server, but any other error occured.
      UI::MessagePopup(_("Initialization of FTP/HTTP server failed:
internal error.
"));
      return `abort;
  }

  // get last update status from YOU agent
  last_status = SCR::Read(.you.lastUpdateStatus);

  y2debug("ONLINE: last update status: %1", last_status );

 integer num = tointeger( lookup( last_status, "days", "0" ));
 string last_update = sformat( _("Last update was executed\n %1 day ago.", "Last update was executed\n %1 days ago.", num), num );

  // layout main dialog

  term contents =
      `VBox(
	    `VSpacing( 0.3 ),
	    `HBox(`HWeight(1, `Empty()),
		  `HWeight(8, `Frame (_("Last update information"),
				      `VBox(`VSpacing(0.8),
					    `HBox(`HSpacing(0.8),`Left(`Label(last_update)),
						  `HSpacing(2.0),
						  `PushButton( `id(`details), `opt(`notify), _("&Details"))
						  ),
					    `VSpacing(0.8)
					    )
				      )),
		  `HWeight(1, `Empty())
		  ),
	    `VSpacing(1.0),
	    `HBox(`HWeight(1, `Empty()),
		  `HWeight(8, `Frame (_("Choice of update mode"),
				      `RadioButtonGroup(`id(`choice),
							`VBox(
							      `VSpacing(0.3),
							      `HBox(`HSpacing(0.8),
								    `Left(`RadioButton(`id(`automatic),`opt(`notify),
										       _("Automatic &Update"), false) )
								    ),
							      `VSpacing(0.3),
							      `HBox(`HSpacing(0.8),
								    `Left(`RadioButton(`id(`manual),`opt(`notify),
										       _("&Manual Update") ,  false))
								    ),
							      `VSpacing(0.3)
							      )
							)
				      )),
		  `HWeight(1, `Empty())
		  ),
	    `VSpacing(1.0),
	    `HBox(`HWeight(1, `Empty()),
		  `HWeight(8, `Frame (_("Choice of installation source"),
				      `RadioButtonGroup(`id(`choice),
							`VBox(
							      `VSpacing(0.3),
							      `HBox(`HSpacing(1.2),
								    `Left(`ComboBox(`id(`you), _("&Installation source"), you_server_list )),
								    `PushButton( `id(`expert), `opt(`notify), _("&Expert"))
								    ),
							      `VSpacing(0.3)
							      )
							)
				      )),
		  `HWeight(1, `Empty())
		  ),
	    `VSpacing( 0.5 )
	    );

  string help_text = "";

  // helptext dialog online update start screen
  string help_part1 =  _("<p>SuSE Online Update is the easy way to get all recommended
patches and security fixes from a SuSE ftp/http server.<br>
<b>Automatic Update</b> will connect to the server,
fetch the files, and install the patches.</p>
");

  string help_part2 =  _("<p>
<b>Manual Update</b> will display all available patches
and you can choose which patches should be installed.<br>
Information about the last update will be shown
if you click on the <b>Details</b> button.
</p>");

  string help_part3 =  _("<p>After clicking <b>Expert</b>, select a local
installation source instead of an FTP/HTTP server or select
another FTP/HTTP server.</p>
");


  help_text = help_part1 + help_part2 + help_part3;

  if ( OnlineUpdate::you_auto_install )
  {
      // auto mode; install patches which are currently on the server
      // Do not use internet

      return `next;
  }

  if ( OnlineUpdate::you_auto_get || OnlineUpdate::you_auto_install )
  {
      // auto mode; get patch descriptions and packages, but do not install patches
      if ( size ( you_server_list ) <= 0 )
      {
	  y2error ( "No serverlist available" );
	  return `abort;
      }
      string you_server = read_first_suseserver();
      string you_serverkind = read_first_suseserverkind();
      string you_dir = select( lookup(you_server_map, you_server, ["",""]), 0, "" );

      Mode::youInstallMap["you_server"]	= you_server;
      Mode::youInstallMap["you_dir"] 	= you_dir;
      Mode::youInstallMap["you_serverkind"] = you_serverkind;

      any retval = SCR::Execute( .you.setServer,
				 $["kind":you_serverkind,
				   "name":you_server,
				   "path":you_dir]);

      if (retval == nil || retval == false)
      {
	  y2error("ONLINE: .you.setServer( %1, %2 %3) ): %4", you_server, you_dir, you_serverkind, retval );
	  return `abort;
      }
      y2debug("ONLINE: .you.setServer( %1, %2 %3) ): %4", you_server, you_dir, you_serverkind, retval );

      return `next;
  }

  if ( !cd_update )
  {
      Wizard::SetContents(_("Welcome to SuSE Package Update"), contents, help_text, Args(0), Args(1) );

      Wizard::ReplaceAbortButton( `PushButton(`id(`abort), _("&Abort Update")));
  }
  else
  {
      // write settings for CD update and return `next
      OnlineUpdate::you_auto 	= false;

      any retval = SCR::Execute( .you.setServer,
				 $["kind":you_serverkind,
				  "name":you_server,
				  "path":you_dir]);

      if (retval == nil || retval == false)
      {
	  y2error("ONLINE: .you.setServer( %1, %2 %3) ): %4", you_server, you_dir, you_serverkind, retval );
	  return `abort;
      }
      y2debug("ONLINE: .you.setServer( %1, %2 %3) ): %4", you_server, you_dir, you_serverkind, retval );

      return `next;
  }


  if ( OnlineUpdate::you_auto )
  {
      UI::ChangeWidget(`id(`automatic), `Value, true );
      UI::ChangeWidget(`id(`manual), `Value, false );
  }
  else
  {
      UI::ChangeWidget(`id(`automatic), `Value, false );
      UI::ChangeWidget(`id(`manual), `Value, true );
  }

  if ( you_server != "" )
  {
      UI::ChangeWidget(`id(`you), `Value, you_server );
  }

  //  Loop for User Input ....

  symbol ret = `next;

  repeat {

      ret= UI::UserInput();

      if ( UI::QueryWidget(`id(`automatic), `Value ) )
      {
	  OnlineUpdate::you_auto = true;
      }
      else
      {
	  OnlineUpdate::you_auto = false;
      }

      // which server is selected from combo box installation source ?
      string you_server =  UI::QueryWidget(`id(`you), `Value );

      if (ret == `next)
      {
	  you_dir 	 = select( lookup(you_server_map, you_server, ["",""]), 0, "" );
	  you_serverkind = select( lookup(you_server_map, you_server, ["",""]), 1, "" );

	  any retval = SCR::Execute( .you.setServer,
				     $["kind":you_serverkind,
				       "name":you_server,
				       "path":you_dir]);

	  y2debug("ONLINE: .you.setServer( %1, %2 %3) ): %4", you_server, you_dir, you_serverkind, retval );

	  if (retval == nil || retval == false)
	  {
	      UI::ErrorPopup(_("Initialization failed. Try again.
If failure continues, choose
another SuSE FTP/HTTP server.\n"));
	      ret = `again;
	  }
	  else
	  {
	      // save install information in Mode.ycp
	      if ( you_serverkind == "cd" || you_serverkind == "hd" )
	      {
		  Mode::youInstallMap["you_server"] = you_serverkind;
	      }
	      else
	      {
		  Mode::youInstallMap["you_server"]	= you_server;
	      }
	      Mode::youInstallMap["you_dir"] 	= you_dir;
	      Mode::youInstallMap["you_serverkind"] = you_serverkind;

	      // Show popup to get the registration and password in case of business product
	      // and no local installation
	      if ( business
		   && you_serverkind != "cd"
		   && you_serverkind != "hd"
		   && you_serverkind != "nfs" )
	      {
		  // get, check and possibly save the registration and password
		  boolean success = CheckAuthorization( );

		  if ( !success )
		  {
		      return `abort;
		  }
	      }
	  }
      }
      else if ( ret == `details )
      {
	  any retval = CallFunction(`online_update_details( true, false ) );
	  if ( retval == `abort )
	      return `abort;

	  ret = `again;
      }
      else if ( ret == `expert )
      {
	  you_dir 	 = select( lookup(you_server_map, you_server, ["",""]), 0, "" );
	  you_serverkind = select( lookup(you_server_map, you_server, ["",""]), 1, "" );

	  // Possible values for you_serverkind (see also inst_source.ycp):
	  // "ftp", "http", "cd", "hd", "local", "nfs" ( "local" )

          // set install information for inst_source
	  if ( you_serverkind == "cd" || you_serverkind == "hd" )
	  {
	      Mode::youInstallMap["you_server"] = you_serverkind;
	  }
	  else
	  {
	      Mode::youInstallMap["you_server"]	= you_server;
	  }
	  Mode::youInstallMap["you_dir"] 	= you_dir;
	  Mode::youInstallMap["you_serverkind"] = you_serverkind;

	  // call dialog Change source of installation
	  any retval = CallFunction(`inst_source( true, true ) );
	  if ( ( retval == `abort
		 || retval == `cancel )
	       && UI::ConfirmAbortUpdate(`painless) )
	      return `abort;

	  // get install information after returning from inst_source
	  you_server 		= Mode::youInstallMap["you_server"]:"";
	  you_serverkind 	= Mode::youInstallMap["you_serverkind"]:"";
	  you_dir 		= Mode::youInstallMap["you_dir"]:"";

	  retval = SCR::Execute( .you.setServer,
				 $["kind":you_serverkind,
				  "name":you_server,
				  "path":you_dir]);

	  y2debug("ONLINE: .you.setServer( %1, %2 %3) ): %4", you_server, you_dir, you_serverkind, retval );

	  if (retval == nil || retval == false)
	  {
	      UI::ErrorPopup(_("Initialization failed. Try again.
If failure continues, choose
another SuSE FTP/HTTP server.\n"));
	  }
	  ret = `again;
      }
      else if ( ret == `abort && UI::ConfirmAbortUpdate(`painless) )
	  return  `abort;

  } until (ret == `back || ret == `next || ret == `again);

  y2debug("Return START: %1", ret );

  return ret;
}

