/**
 * File:	clients/online_update_select.ycp
 * Package:	Online update
 * Summary:	Start update, display last update info, choose mode (auto|manual)
 * Authors:	Gabriele Strattner <gs@suse.de>
 *		Stefan Schubert <schubi@suse.de>
 *              Cornelius Schumacher <cschum@suse.de>
 *
 * $Id$
 */

{

  textdomain "online-update";

  import "Arch";
  import "Mode";
  import "OnlineUpdate";

  include "ui/file_popups.ycp";
  include "inst_source_dialogs.ycp";

  boolean business	= false;

  global define string GetPatches() ``{

    UI::OpenDialog( `opt( `decorated ),
      `VBox(
        `VSpacing( 0.2 ),
        `ProgressBar( `id( `progress ), _("Getting patch information.") ),
        `VSpacing( 0.2 ),
        `PushButton( `id( `abort ), AbortButtonLabel() ),
        `VSpacing( 0.2 )
      )
    );

    string err = Pkg::YouGetPatches( you_server,
                                     OnlineUpdate::reload,
                                     OnlineUpdate::signature_check );

    UI::CloseDialog();

    return err;

  };

  global define SetupAutomatic() ``{

    string txt = _("Automatic update is executed by a daily cronjob. Note
that a network connection has to be available when
the update takes place.");

    string cronfile = "/etc/cron.d/yast2-online-update";

    string cronjob = SCR::Read( .target.string, cronfile );
    y2debug("cronjob: %1",cronjob);

    integer hour = 0;
    integer minute = 0;

    boolean autoget = false;

    boolean enabled = false;
    if ( size( cronjob ) > 0 ) {
      enabled = true;

      string h = regexpsub( cronjob, "[0-9]+ ([0-9]+) ", "\\1" );
      string m = regexpsub( cronjob, "([0-9]+) ([0-9]+) ", "\\1" );

      y2debug("TIME: %1 %2", h, m );

      hour = tointeger( h );
      minute = tointeger( m );

      if ( regexpmatch( cronjob, "-g" ) ) autoget = true;
    } else {
      hour = random( 24 );
      minute = random( 60 );
    }

    UI::OpenDialog( `opt( `decorated ),
      `VBox(
        `VSpacing( 0.2 ),
        `Label( txt ),
        `VSpacing( 0.2 ),
        `CheckBox( `id( `enable ), `opt( `notify ), _("Enable automatic update"), enabled ),
        `VSpacing( 0.2 ),
        `CheckBox( `id( `autoget ), _("Only download patches."), autoget ),
        `VSpacing( 0.2 ),
        `Label( `id( `crontime ), _("Time when update is performed:") ),
        `HBox(
            `HStretch(),
            `IntField( `id( `hour ), _("Hour"), 0, 23, hour ),
            `IntField( `id( `minute ), _("Minute"), 0, 59, minute ),
            `HStretch()
        ),
        `VSpacing( 0.2 ),
        
        `HBox(
          `PushButton( `id( `ok ), OKButtonLabel() ),
          `PushButton( `id( `cancel ), CancelButtonLabel() )
        )
      )
    );

    UI::ChangeWidget( `id( `autoget ), `Enabled, enabled );
    UI::ChangeWidget( `id( `crontime ), `Enabled, enabled );
  
    symbol ret = `enable;

    repeat {
        enabled = UI::QueryWidget( `id( `enable ), `Value );

        if ( ret == `enable ) {
            UI::ChangeWidget( `id( `autoget ), `Enabled, enabled );
            UI::ChangeWidget( `id( `crontime ), `Enabled, enabled );
            UI::ChangeWidget( `id( `hour ), `Enabled, enabled );
            UI::ChangeWidget( `id( `minute ), `Enabled, enabled );
        }
    
        ret = UI::UserInput();

        if ( ret == `ok ) {
            if ( enabled ) {
                minute = UI::QueryWidget( `id( `minute ), `Value );
                hour = UI::QueryWidget( `id( `hour ), `Value );
                autoget = UI::QueryWidget( `id( `autoget ), `Value );

                string cronjob = sformat( "%1 %2 * * * root online_update", minute, hour );
                
                if ( autoget ) cronjob = cronjob + " -g";
                
                SCR::Write( .target.string, cronfile, cronjob );
            } else {
                SCR::Execute( .target.remove, cronfile );
            }
        }
    } until ( ret == `ok || ret == `cancel );

    UI::CloseDialog();
  }

  /////////////////////////////////////////////////////////////////////////////////////
  // MAIN:
  /////////////////////////////////////////////////////////////////////////////////////


  map last_status = $[];

  boolean cd_update = OnlineUpdate::cd_update;

  list you_server_list = [];

  string you_url = OnlineUpdate::you_url;

  y2milestone( "you_url: %1", you_url );

  map statusmap = Pkg::YouStatus();
  y2debug("status map: %1", statusmap );

  string mirrorListServer = lookup( statusmap, "mirrorurl", "www.suse.de" );

  string initMessage = "";
  if ( cd_update ) {
    initMessage = _("Initializing for CD update.");
    you_url = "cd:///";
  } else {
    initMessage = sformat( _("Getting list of mirror servers."), mirrorListServer );
  }
  UI::OpenDialog(`opt(`decorated ),`Label( initMessage ));

  if ( size( you_url ) != 0 ) {
    you_server_list = add( you_server_list, you_url );
  } else {
    string err = Pkg::YouGetServers( you_server_list );
    if ( size( err ) != 0 ) {
      y2error( "Get Servers: %1", err );
      if ( err == "get" ) {
        UI::YouErrorPopup( sformat( _("Cannot connect to %1. Check your connection."),
                                    mirrorListServer ),
                           Pkg::ErrorDetails() );
      } else if ( err == "write" ) {
        UI::ErrorPopup( _("Could not write server list to disk.") );
      } else {
        UI::ErrorPopup(_("Error getting servers."));
      }
      return `abort;
    }
  }

  if ( size( you_server_list ) == 0 ) {
    UI::ErrorPopup( _("No YOU server available.") );
    return `abort;
  }

  UI::CloseDialog();

  string status_product = lookup( statusmap, "product", "unknown" );
  string status_version = lookup( statusmap, "version", "unknown" );
  string status_basearch = lookup( statusmap, "basearch", "unknown" );
  boolean status_business = lookup( statusmap, "business", false );
  integer status_lastupdate = lookup( statusmap, "lastupdate", -1 );

  string lastupdateLabel = "";
  
  if ( status_lastupdate == -1 ) {
    lastupdateLabel = _( "There was no update executed up to now." );
  } else if ( status_lastupdate == 0 ) {
    lastupdateLabel = _( "Last successfull update was performed less than one day ago." );
  } else {
    lastupdateLabel = _( "Last successfull update was performed %1 day ago.",
                         "Last successfull update was performed %1 days ago.",
                         status_lastupdate );
  }

  // layout main dialog

  term contents =
  `VBox(
      `VSpacing( 0.3 ),
      `HBox(
          `HWeight(1, `Empty()),
          `HWeight(10,
              `Frame ( _("System &information"),
                  `VBox(
                      `VSpacing(0.3),
                      `HBox(`HSpacing(0.8),
                            `Left( `Label( sformat( _("Product: %1"), status_product ) ) ),
                            `HSpacing(0.8)
                      ),
                      `HBox(`HSpacing(0.8),
                          `Left( `Label( sformat( _("Version: %1"), status_version ) ) )
                      ),
                      `HBox(`HSpacing(0.8),
                          `Left( `Label( sformat( _("Base architecture: %1"), status_basearch ) ) )
                      ),
                      `VSpacing(0.5),
                      `HBox(`HSpacing(0.8),
                          `Left( `Label( sformat( lastupdateLabel , status_lastupdate ) ) )
                      ),
                      `VSpacing(0.3)
                  )
              )
          ),
          `HWeight(1, `Empty())
      ),
      `VSpacing(1.0),
      `HBox(
          `HWeight(1, `Empty()),
          `HWeight(10,
              `Frame (_("Update Configuration"),
                  `VBox(
                      `VSpacing(0.3),
                      `HBox(
                          `HSpacing(1.2),
                          `HWeight(1,`Left(`ComboBox(`id(`you), `opt(`editable), _("&Installation source"), you_server_list ))),
                          `PushButton( `id(`expert), `opt(`notify), _("&Expert...")),
                          `HSpacing(1.2)
                      ),
                      `VSpacing(0.3),
                      `HBox(`HSpacing(0.8),
                          `Left(`CheckBox(`id(`manual),
                                _("&Manually select patches"), true ) )
                      ),
                      `HBox(`HSpacing(0.8),
                          `Left(`CheckBox(`id(`reload),
                                _("&Reload all patches from server"), true ) )
                      ),
                      `VSpacing( 0.5 ),
                      `HBox(
                          `HSpacing( 0.8 ),
                          `Left( `PushButton( `id( `automatic ),
                                 _("&Configure fully automatic update..." ) ) )
                      ),
                      `VSpacing( 0.3 )
                  )
              )
          ),
          `HWeight(1, `Empty())
      ),
      `VSpacing( 0.5 )
  );

  string help_text = "";

  // helptext dialog online update start screen
  string help_part1 =  _("<p>SuSE Online Update is the easy way to get all recommended
patches and security fixes from a SuSE ftp/http server.<br>
<b>Automatic Update</b> will connect to the server,
fetch the files, and install the patches.</p>
");

  string help_part2 =  _("<p>
<b>Manual Update</b> will display all available patches
and you can choose which patches should be installed.
</p>");

  string help_part3 =  _("<p>After clicking <b>Expert</b>, select a local
installation source instead of an FTP or HTTP server or select
another FTP or HTTP server.</p>
");


  help_text = help_part1 + help_part2 + help_part3;

  Wizard::SetContents(_("Welcome to SuSE Package Update"), contents, help_text, WFM::Args(0), WFM::Args(1) );

  Wizard::ReplaceAbortButton( `PushButton(`id(`abort), _("&Abort Update")));

  if ( OnlineUpdate::you_auto )
  {
      UI::ChangeWidget(`id(`automatic), `Value, true );
      UI::ChangeWidget(`id(`manual), `Value, false );
  }
  else
  {
      UI::ChangeWidget(`id(`automatic), `Value, false );
      UI::ChangeWidget(`id(`manual), `Value, true );
  }

/*
  if ( you_server != "" )
  {
      UI::ChangeWidget(`id(`you), `Value, you_server );
  }
*/

  string url = "";

  //  Loop for User Input ....

  symbol ret = `next;

  repeat {

      ret = UI::UserInput();

      OnlineUpdate::you_auto = !UI::QueryWidget( `id( `manual ), `Value );
      OnlineUpdate::reload = UI::QueryWidget( `id( `reload ), `Value );

      // which server is selected from combo box installation source ?
      string you_server =  UI::QueryWidget(`id(`you), `Value );

      if (ret == `next)
      {
	  // Show popup to get the registration and password in case of
          // business product and no local installation
          if ( status_business &&
               ( substring( you_server, 0, 4 ) == "ftp:" ||
                 substring( you_server, 0, 5 ) == "http:" ) )
          {
	      // get, check and possibly save the registration and password
	      boolean success = CheckAuthorization( you_server );
	      if ( !success )
              {
		  ret = `this;
                  continue;
	      }
	  }

          string err = GetPatches();

          if ( size( err ) != 0 ) {
            y2error( "GetPatches err: %1", err ); 

            ret = `this;

            if ( err != "abort" ) {
              string msg = "";
              string details = Pkg::ErrorDetails();
              if ( err == "media" ) {
                if ( cd_update ) {
                  msg = _("Initialization failed. Please check that
you have inserted the correct CD.\n");
                } else {
	          msg = _("Initialization failed. Try again.
If failure continues, choose
another SuSE FTP/HTTP server.\n");
                }
              } else if ( err == "sig" ) {
                  msg = _("Signature check for patch info files failed.
Can't load patch information.\n");
                  ret = `this;
              } else if ( err == "url" ) {
                  msg = _("URL is invalid.");
              } else {
                  msg = _("Getting patch information failed.");
                  details = err + "\n" + details;
              }

              UI::YouErrorPopup( msg, details );
            }
          } else {
            Pkg::YouSelectPatches();
          }
      }
      else if ( ret == `expert )
      {
          string url = getUrl( "" );
          if ( size( url ) > 0 ) {
            UI::ChangeWidget( `id(`you), `Value, url );
          }
      }
      else if ( ret == `automatic ) {
          SetupAutomatic();
      }
      else if ( ret == `abort && UI::ConfirmAbortUpdate(`painless) )
	  return  `abort;

  } until (ret == `back || ret == `next || ret == `again);

  y2debug("Return START: %1", ret );

  return ret;
}
