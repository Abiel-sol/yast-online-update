/**
 * File:	clients/online_update_select.ycp
 * Package:	Online update
 * Summary:	Start update, display last update info, choose mode (auto|manual)
 * Authors:	Gabriele Strattner <gs@suse.de>
 *		Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 */

{

  textdomain "online-update";

  import "Arch";
  import "Mode";
  import "OnlineUpdate";

  include "inst_source_dialogs.ycp";

  boolean business	= false;


  /////////////////////////////////////////////////////////////////////////////////////
  // MAIN:
  /////////////////////////////////////////////////////////////////////////////////////


  map last_status = $[];

  boolean cd_update 	= OnlineUpdate::cd_update;

  list you_server_list = [];

  string you_url = OnlineUpdate::you_url;

  y2milestone( "you_url: %1", you_url );

  UI::OpenDialog(`opt(`decorated ),`Label(_("Initializing for FTP/HTTP update. One moment please...")));

  if ( cd_update ) you_url = "cd:///";

  if ( size( you_url ) != 0 ) {
    you_server_list = add( you_server_list, you_url );
  } else {
    string err = Pkg::YouGetServers( you_server_list );
    y2error( "Get Servers: %1", err );
    if ( size( err ) != 0 ) {
      if ( err == "get" ) {
        UI::ErrorPopup(_("Cannot connect to www.suse.de. Check your connection."));
      } else {
        UI::ErrorPopup(_("Error getting servers."));
      }
      return `abort;
    }
  }

  if ( size( you_server_list ) == 0 ) {
    // Error
  }

  string str1 = _("Getting available serverlist from www.suse.de ...");
  string str3 = _("Last update was executed\n %1 day ago.", "Last update was executed\n %1 days ago.", num);

//  Pkg::TargetInit("/",false);

  map statusmap = Pkg::YouStatus();

  UI::CloseDialog();

  y2debug("status map: %1", statusmap );

  string status_product = lookup( statusmap, "product", "unknown" );
  string status_version = lookup( statusmap, "version", "unknown" );
  string status_basearch = lookup( statusmap, "basearch", "unknown" );
  boolean status_business = lookup( statusmap, "business", false );

  // layout main dialog

  term contents =
    `VBox(
      `VSpacing( 0.3 ),
      `HBox(
        `HWeight(1, `Empty()),
        `HWeight(8,
          `Frame ( _("System &information"),
            `VBox(
              `VSpacing(0.3),
              `HBox(`HSpacing(0.8),
                `Left( `Label( sformat( _("Product: %1"), status_product ) ) )
              ),
              `HBox(`HSpacing(0.8),
                `Left( `Label( sformat( _("Version: %1"), status_version ) ) )
              ),
              `HBox(`HSpacing(0.8),
                `Left( `Label( sformat( _("Base architecture: %1"), status_basearch ) ) )
              ),
              `VSpacing(0.3)
            )
          )
        ),
        `HWeight(1, `Empty())
      ),
      `VSpacing(1.0),
      `HBox(
        `HWeight(1, `Empty()),
        `HWeight(8, `Frame (_("&Choice of update mode"),
                `RadioButtonGroup(`id(`choice),
                `VBox(
                      `VSpacing(0.3),
                      `HBox(`HSpacing(0.8),
                      `Left(`RadioButton(`id(`automatic),`opt(`notify),
                             _("Automatic &Update"), false) )
                      ),
                      `VSpacing(0.3),
                      `HBox(`HSpacing(0.8),
                      `Left(`RadioButton(`id(`manual),`opt(`notify),
                             _("&Manual Update") ,  false))
                      ),
                      `VSpacing(0.3)
                      )
                )
                )),
        `HWeight(1, `Empty())
      ),
      `VSpacing(1.0),
      `HBox(
        `HWeight(1, `Empty()),
        `HWeight(8,
          `Frame ( _("Choice of installation &source"),
            `RadioButtonGroup(`id(`choice),
              `VBox(
                `VSpacing(0.3),
                `HBox(`HSpacing(1.2),
                  `Left(`ComboBox(`id(`you), `opt(`editable), _("&Installation source"), you_server_list )),
                  `PushButton( `id(`expert), `opt(`notify), _("&Expert"))
                ),
                `VSpacing(0.3)
              )
            )
          )
        ),
        `HWeight(1, `Empty())
      ),
      `VSpacing( 0.5 )
    );

  string help_text = "";

  // helptext dialog online update start screen
  string help_part1 =  _("<p>SuSE Online Update is the easy way to get all recommended
patches and security fixes from a SuSE ftp/http server.<br>
<b>Automatic Update</b> will connect to the server,
fetch the files, and install the patches.</p>
");

  string help_part2 =  _("<p>
<b>Manual Update</b> will display all available patches
and you can choose which patches should be installed.<br>
Information about the last update will be shown
if you click on the <b>Details</b> button.
</p>");

  string help_part3 =  _("<p>After clicking <b>Expert</b>, select a local
installation source instead of an FTP or HTTP server or select
another FTP or HTTP server.</p>
");


  help_text = help_part1 + help_part2 + help_part3;

  if ( OnlineUpdate::you_auto_install )
  {
      // auto mode; install patches which are currently on the server
      // Do not use internet

      return `next;
  }

  Wizard::SetContents(_("Welcome to SuSE Package Update"), contents, help_text, WFM::Args(0), WFM::Args(1) );

  Wizard::ReplaceAbortButton( `PushButton(`id(`abort), _("&Abort Update")));

  if ( OnlineUpdate::you_auto )
  {
      UI::ChangeWidget(`id(`automatic), `Value, true );
      UI::ChangeWidget(`id(`manual), `Value, false );
  }
  else
  {
      UI::ChangeWidget(`id(`automatic), `Value, false );
      UI::ChangeWidget(`id(`manual), `Value, true );
  }

/*
  if ( you_server != "" )
  {
      UI::ChangeWidget(`id(`you), `Value, you_server );
  }
*/

  string url = "";

  //  Loop for User Input ....

  symbol ret = `next;

  repeat {

      ret= UI::UserInput();

      if ( UI::QueryWidget(`id(`automatic), `Value ) )
      {
	  OnlineUpdate::you_auto = true;
      }
      else
      {
	  OnlineUpdate::you_auto = false;
      }

      // which server is selected from combo box installation source ?
      string you_server =  UI::QueryWidget(`id(`you), `Value );

      if (ret == `next)
      {
	  // Show popup to get the registration and password in case of
          // business product and no local installation
          if ( status_business &&
               ( substring( you_server, 0, 4 ) == "ftp:" ||
                 substring( you_server, 0, 5 ) == "http:" ) )
          {
	      // get, check and possibly save the registration and password
	      boolean success = CheckAuthorization( you_server );
	      if ( !success )
              {
		  ret = `this;
	      }
	  }

          UI::OpenDialog(`opt(`decorated ),`Label(_("Initializing for FTP/HTTP update. One moment please...")));
          string err = Pkg::YouGetPatches( you_server,
                                           OnlineUpdate::signature_check );
          UI::CloseDialog();
          
          if ( size( err ) != 0 ) {
            if ( err == "media" ) {
	      UI::ErrorPopup(_("Initialization failed. Try again.
If failure continues, choose
another SuSE FTP/HTTP server.\n"));
	      ret = `this;
            } else if ( err == "sig" ) {
                UI::ErrorPopup(_("Signature check for patch info files failed.
Can't load patch information.\n"));
              ret = `this;
            } else if ( err == "url" ) {
                UI::ErrorPopup(_("URL is invalid."));
            } else {
              y2error( "YouGetPatches Error: %1", err );
              // Message popup: yast2 component responsible for the you update cannot be initialised.
              // This does not mean, connection failed to you server, but any other error occured.
              UI::MessagePopup(_("Initialization of FTP/HTTP server failed:
internal error.
"));
              return `abort;
            }
          }

          Pkg::YouSelectPatches();
      }
/*
      else if ( ret == `details )
      {
	  any retval = WFM::CallFunction(`online_update_details( true, false ) );
	  if ( retval == `abort )
	      return `abort;

	  ret = `again;
      }
*/
      else if ( ret == `expert )
      {
          string url = getUrl( "" );

          UI::ChangeWidget( `id(`you), `Value, url );
/*
	  you_dir 	 = select( lookup(you_server_map, you_server, ["",""]), 0, "" );
	  you_serverkind = select( lookup(you_server_map, you_server, ["",""]), 1, "" );

	  // Possible values for you_serverkind (see also inst_source.ycp):
	  // "ftp", "http", "cd", "hd", "local", "nfs" ( "local" )

          // set install information for inst_source
	  if ( you_serverkind == "cd" || you_serverkind == "hd" )
	  {
	      Mode::youInstallMap["you_server"] = you_serverkind;
	  }
	  else
	  {
	      Mode::youInstallMap["you_server"]	= you_server;
	  }
	  Mode::youInstallMap["you_dir"] 	= you_dir;
	  Mode::youInstallMap["you_serverkind"] = you_serverkind;

	  // call dialog Change source of installation
	  any retval = WFM::CallFunction(`inst_source( true, true ) );
	  if ( ( retval == `abort
		 || retval == `cancel )
	       && UI::ConfirmAbortUpdate(`painless) )
	      return `abort;

	  // get install information after returning from inst_source
	  you_server 		= Mode::youInstallMap["you_server"]:"";
	  you_serverkind 	= Mode::youInstallMap["you_serverkind"]:"";
	  you_dir 		= Mode::youInstallMap["you_dir"]:"";

	  retval = SCR::Execute( .you.setServer,
				 $["kind":you_serverkind,
				  "name":you_server,
				  "path":you_dir]);

	  y2debug("ONLINE: .you.setServer( %1, %2 %3) ): %4", you_server, you_dir, you_serverkind, retval );

	  if (retval == nil || retval == false)
	  {
	      UI::ErrorPopup(_("Initialization failed. Try again.
If failure continues, choose
another SuSE FTP/HTTP server.\n"));
	  }
	  ret = `again;
*/
      }
      else if ( ret == `abort && UI::ConfirmAbortUpdate(`painless) )
	  return  `abort;

  } until (ret == `back || ret == `next || ret == `again);

  y2debug("Return START: %1", ret );

  return ret;

/* EOF */
}
