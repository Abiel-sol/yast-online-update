/**
 * File:	clients/online_update_select.ycp
 * Package:	Online update
 * Summary:	Start update, display last update info, choose mode (auto|manual)
 * Authors:	Gabriele Strattner <gs@suse.de>
 *		Stefan Schubert <schubi@suse.de>
 *              Cornelius Schumacher <cschum@suse.de>
 *
 * $Id$
 */

{

  textdomain "online-update";

  import "Arch";
  import "Mode";
  import "OnlineUpdate";

  include "ui/file_popups.ycp";
  include "inst_source_dialogs.ycp";

   // Request username/password from user (or regcode/password in case of
   // maintanance web).
   global define DisplayLoginPopup(string username, string password,
				   string headline, string message,
                                   boolean regcode ) ``{
       map ret_map = $[];

       string usernameLabel = _("&Username:");
       if ( regcode ) usernameLabel = _("&Code:");

       UI::OpenDialog(
		  `opt(`decorated),
		  `HBox(
			`HSpacing(1),
			`VBox(
			      `Left(`Heading( headline )),
			      `VSpacing(0.2),
			      `Label( message ),
			      `Frame (_("Authentification data"),
				      `VBox (
					     `HBox (
						    `HSpacing (0.5),
						    `TextEntry ( `id(`username), usernameLabel, username ),
						    `HSpacing (0.5)
						    ),
					     `HBox (
						    `HSpacing (0.5),
						    `Password ( `id(`password), _("&Password:"), password ),
						    `HSpacing (0.5)
						    ))),
			      `VSpacing(0.2),
			      `CheckBox(`id(`keep), _("&Keep authentification data"), false ),
			      `VSpacing(0.2),
                              `PushButton(`id(`clear), _("&Clear inputs")),
                              `VSpacing(0.2),
			      `HBox(`PushButton(`id(`login), `opt(`default), _("&Login") ),
				    `PushButton(`id(`abort), CancelButtonLabel() )
				    ),
			      `VSpacing(0.2)

			      ),
			`HSpacing(1)
			)
		  );

       UI::SetFocus( `id(`username) );

       do {
           any ret = UI::UserInput();

           if ( ret == `login )
           {
	       ret_map = add(ret_map, "username", UI::QueryWidget(`id(`username), `Value));
	       ret_map = add(ret_map, "password", UI::QueryWidget(`id(`password), `Value));
	       ret_map = add(ret_map, "persistent", UI::QueryWidget(`id(`keep), `Value));
	       ret_map = add(ret_map, "login", true );
           }
           else if ( ret == `clear )
           {
               UI::ChangeWidget( `id(`username), `Value, "" );
               UI::ChangeWidget( `id(`password), `Value, "" );
           }
           else
           {
	       ret_map =  add(ret_map, "login", false);
           }
       } while ( ret == `clear );

       UI::CloseDialog();

       return ret_map;
   };


  global define string GetPatches() ``{

    UI::OpenDialog( `opt( `decorated ),
      `VBox(
        `VSpacing( 0.2 ),
        `ProgressBar( `id( `progress ), _("Getting patch information...") ),
        `VSpacing( 0.2 ),
        `PushButton( `id( `abort ), AbortButtonLabel() ),
        `VSpacing( 0.2 )
      )
    );
    
    Pkg::YouSetServer( server );

    map usermap = Pkg::YouGetUserPassword();

    string err = Pkg::YouGetDirectory();

    if ( err == "login" ) {
      string username = usermap[ "username" ]:"";
      string password = usermap[ "password" ]:"";
      string headline = _("Authorization");
      string msg_string = _("Enter the registration data.");

      boolean regcode = false;
      string server_url = server[ "url" ]: "";
      if ( substring( server_url, 0, 18 ) == "http://sdb.suse.de" ) {
        regcode = true;
      }

      map registration_map = DisplayLoginPopup( username, password,
                                                headline, msg_string,
                                                regcode );

      if ( registration_map[ "login" ]: false ) {
        Pkg::YouSetUserPassword( registration_map[ "username" ]:"",
                                 registration_map[ "password" ]:"",
                                 registration_map[ "persistent" ]:false );
        err = "";
      } else {
        err = "abort";
      }
    }

    if ( err == "" ) {
      err = Pkg::YouGetPatches( OnlineUpdate::reload,
                                OnlineUpdate::signature_check );
    }
    
    UI::CloseDialog();

    return err;

  };

  global define SetupAutomatic() ``{

    string txt = _("Automatic update is executed by a daily cronjob. 
A network connection must be available when
the update takes place.
");

    string cronfile = "/etc/cron.d/yast2-online-update";

    string cronjob = SCR::Read( .target.string, cronfile );
    y2debug("cronjob: %1",cronjob);

    integer hour = 0;
    integer minute = 0;

    boolean autoget = false;

    boolean enabled = false;
    if ( size( cronjob ) > 0 ) {
      enabled = true;

      string h = regexpsub( cronjob, "[0-9]+ ([0-9]+) ", "\\1" );
      string m = regexpsub( cronjob, "([0-9]+) ([0-9]+) ", "\\1" );

      y2debug("TIME: %1 %2", h, m );

      hour = tointeger( h );
      minute = tointeger( m );

      if ( regexpmatch( cronjob, "-g" ) ) autoget = true;
    } else {
      hour = random( 24 );
      minute = random( 60 );
    }

    UI::OpenDialog( `opt( `decorated ),
      `VBox(
        `VSpacing( 0.2 ),
        `Label( txt ),
        `VSpacing( 0.2 ),
        `CheckBox( `id( `enable ), `opt( `notify ), _("Enable Automatic Update"), enabled ),
        `VSpacing( 0.2 ),
        `CheckBox( `id( `autoget ), _("Only Download Patches"), autoget ),
        `VSpacing( 0.2 ),
        `Label( `id( `crontime ), _("Time when update is performed:") ),
        `HBox(
            `HStretch(),
            `IntField( `id( `hour ), _("Hour"), 0, 23, hour ),
            `IntField( `id( `minute ), _("Minute"), 0, 59, minute ),
            `HStretch()
        ),
        `VSpacing( 0.2 ),
        
        `HBox(
          `PushButton( `id( `ok ), OKButtonLabel() ),
          `PushButton( `id( `cancel ), CancelButtonLabel() )
        )
      )
    );

    UI::ChangeWidget( `id( `autoget ), `Enabled, enabled );
    UI::ChangeWidget( `id( `crontime ), `Enabled, enabled );
  
    symbol ret = `enable;

    repeat {
        enabled = UI::QueryWidget( `id( `enable ), `Value );

        if ( ret == `enable ) {
            UI::ChangeWidget( `id( `autoget ), `Enabled, enabled );
            UI::ChangeWidget( `id( `crontime ), `Enabled, enabled );
            UI::ChangeWidget( `id( `hour ), `Enabled, enabled );
            UI::ChangeWidget( `id( `minute ), `Enabled, enabled );
        }
    
        ret = UI::UserInput();

        if ( ret == `ok ) {
            if ( enabled ) {
                minute = UI::QueryWidget( `id( `minute ), `Value );
                hour = UI::QueryWidget( `id( `hour ), `Value );
                autoget = UI::QueryWidget( `id( `autoget ), `Value );

                string options = SCR::Read( .sysconfig.onlineupdate.CMDLINE_OPTIONS );

                string cronjob = sformat( "%1 %2 * * * root online_update %3", minute, hour, options );
                
                if ( autoget ) cronjob = cronjob + " -g";

                cronjob = cronjob + "\n";
                
                SCR::Write( .target.string, cronfile, cronjob );
            } else {
                SCR::Execute( .target.remove, cronfile );
            }
        }
    } until ( ret == `ok || ret == `cancel );

    UI::CloseDialog();
  }

  /////////////////////////////////////////////////////////////////////////////////////
  // MAIN:
  /////////////////////////////////////////////////////////////////////////////////////


  boolean cd_update = OnlineUpdate::cd_update;

  list you_server_list = [ $[ "url": "", "name": "User-defined Location" ] ];

  string you_url = OnlineUpdate::you_url;

  y2milestone( "you_url: %1", you_url );

  map statusmap = Pkg::YouStatus();
  y2debug("status map: %1", statusmap );

  string mirrorListServer = lookup( statusmap, "mirrorurl", "www.suse.de" );

  string initMessage = "";
  if ( cd_update ) {
    initMessage = _("Initializing for CD update...");
    you_url = "cd:///";
  } else {
    initMessage = sformat( _("Getting a list of mirror servers..."), mirrorListServer );
  }
  UI::OpenDialog(`opt(`decorated ),`Label( initMessage ));

  if ( size( you_url ) != 0 ) {
    map server = $[ "url": you_url ];
    you_server_list = add( you_server_list, server );
  } else {
    string err = Pkg::YouGetServers( you_server_list );
    if ( size( err ) != 0 ) {
      y2error( "Get Servers: %1", err );
      symbol result = `ok;
      if ( err == "get" ) {
        result = UI::YouIgnorePopup( sformat( _("Cannot connect to %1. Check your connection."),
                                              mirrorListServer ),
                                     Pkg::ErrorDetails() );
      } else if ( err == "read" ) {
        result = UI::YouIgnorePopup( _("Unable to read server list from disk."),
                                     Pkg::ErrorDetails() );
      } else if ( err == "write" ) {
        result = UI::YouIgnorePopup( _("Could not write server list to disk."),
                                     Pkg::ErrorDetails() );
      } else {
        result = UI::YouIgnorePopup( _("Error getting servers."),
                                     Pkg::ErrorDetails() );        
      }
      if ( result == `abort ) return result;
    }
  }

  if ( size( you_server_list ) == 0 ) {
    UI::WarningPopup( _("No YOU server available.") );
  }

  UI::CloseDialog();

  string status_product = lookup( statusmap, "product", "unknown" );
  string status_version = lookup( statusmap, "version", "unknown" );
  string status_basearch = lookup( statusmap, "basearch", "unknown" );
  integer status_lastupdate = lookup( statusmap, "lastupdate", -1 );

  string lastupdateLabel = "";
  
  if ( status_lastupdate == -1 ) {
    lastupdateLabel = _("There was no update executed up to now.");
  } else if ( status_lastupdate == 0 ) {
    lastupdateLabel = _("Last successful update was performed less than one day ago.");
  } else {
    lastupdateLabel = _("Last successful update was performed %1 day ago.",
                        "Last successful update was performed %1 days ago.",
                        status_lastupdate );
  }

  list servers = [];
  integer i = 0;
  while ( i < size( you_server_list ) ) {
    map server = you_server_list[ i ]:$[];
    string name = server[ "name" ]:"";
    string url = server[ "url" ]:"";
    string text = "";
    if ( size( name ) == 0 ) text = url;
    else text = name;
    servers = add( servers, `item( `id( i ), text ) );
    i = i + 1;
  }

  // layout main dialog

  term contents =
  `VBox(
      `VSpacing( 0.3 ),
      `HBox(
          `HWeight(1, `Empty()),
          `HWeight(10,
              `Frame ( _("System &Information"),
                  `VBox(
                      `VSpacing(0.3),
                      `HBox(`HSpacing(0.8),
                            `Left( `Label( sformat( _("Product: %1"), status_product ) ) ),
                            `HSpacing(0.8)
                      ),
                      `HBox(`HSpacing(0.8),
                          `Left( `Label( sformat( _("Version: %1"), status_version ) ) )
                      ),
                      `HBox(`HSpacing(0.8),
                          `Left( `Label( sformat( _("Base Architecture: %1"), status_basearch ) ) )
                      ),
                      `VSpacing(0.5),
                      `HBox(`HSpacing(0.8),
                          `Left( `Label( sformat( lastupdateLabel , status_lastupdate ) ) )
                      ),
                      `VSpacing(0.3)
                  )
              )
          ),
          `HWeight(1, `Empty())
      ),
      `VSpacing(1.0),
      `HBox(
          `HWeight(1, `Empty()),
          `HWeight(10,
              `Frame (_("Update Configuration"),
                  `VBox(
                      `VSpacing(0.3),
                      `VSquash(
                          `HBox(
                              `HSpacing(0.8),
                              `HWeight(1,`Left(`ComboBox(`id(`server), `opt(`notify), _("&Installation source"), servers ))),
                              `HSpacing(1.2),
                              `Bottom(`PushButton( `id(`expert), `opt(`notify), _("&Expert..."))),
                              `HSpacing(1.2)
                      )),
                      `HBox(
                          `HSpacing(0.8),
                          `TextEntry( `id(`url), `opt(`notify), _("URL"), "" ),
                          `HSpacing(1.2)
                      ),
                      `VSpacing(0.3),
                      `HBox(`HSpacing(0.8),
                          `Left(`CheckBox(`id(`manual),
                                _("&Manually Select Patches"), true ) )
                      ),
                      `HBox(`HSpacing(0.8),
                          `Left(`CheckBox(`id(`reload),
                                _("&Reload All Patches from Server"), false ) )
                      ),
                      `VSpacing( 0.5 ),
                      `HBox(
                          `HSpacing( 0.8 ),
                          `Left( `PushButton( `id( `automatic ),
                                 _("&Configure Fully Automatic Update...") ) )
                      ),
                      `VSpacing( 0.3 )
                  )
              )
          ),
          `HWeight(1, `Empty())
      ),
      `VSpacing( 0.5 )
  );

  string help_text = "";

  // helptext dialog online update start screen
  string help_part1 =  _("<p>YaST Online Update (YOU) is the easy way to get all recommended
patches and security fixes from a SuSE update server.
</p>
");

  string help_part2 =  _("<p>
If <b>Manually Select Patches</b> is checked, all available patches will be shown
from which to select the patches to install.<br>
If <b>Reload All Patches from Server</b> is checked, all patches will be fetched
from the server even when they already are locally available from a previous
download.
</p>
");

  string help_part3 =  _("<p>After clicking <b>Expert</b>, select a local
installation source instead of an FTP or HTTP server or select
another FTP or HTTP server.</p>
");

  string help_part4 = _("<p>Clicking <b>Configure Fully Automatic Update</b>
opens a dialog in which to configure YOU to check for updates once a day
and automatically download and install updates when new ones are available
without the need of user interaction.</p>
");

  help_text = help_part1 + help_part2 + help_part3 + help_part4;

  Wizard::SetContents(_("Welcome to YaST Online Update"), contents, help_text, WFM::Args(0), WFM::Args(1) );

  Wizard::ReplaceAbortButton( `PushButton(`id(`abort), _("&Abort Update")));

  if ( OnlineUpdate::you_auto )
  {
      UI::ChangeWidget( `id(`automatic), `Value, true );
      UI::ChangeWidget( `id(`manual), `Value, false );
  }
  else
  {
      UI::ChangeWidget( `id(`automatic), `Value, false );
      UI::ChangeWidget( `id(`manual), `Value, true );
  }

  UI::ChangeWidget( `id(`server), `Value, 1 );

  map server = you_server_list[ 1 ]:$[];
  UI::ChangeWidget( `id(`url), `Value, server[ "url" ]:"" );

  boolean blockUrlEdit = true;


  //  Loop for User Input ....

  symbol ret = `next;

  repeat {

      ret = UI::UserInput();

      if ( ret == `cancel ) ret = `abort;

      OnlineUpdate::you_auto = !UI::QueryWidget( `id( `manual ), `Value );
      OnlineUpdate::reload = UI::QueryWidget( `id( `reload ), `Value );

      // which server is selected from combo box installation source ?
      integer serverId = UI::QueryWidget(`id(`server), `Value );

      server = you_server_list[ serverId ]:$[];

      if ( ret == `server ) {
        UI::ChangeWidget( `id(`url), `Value, server[ "url" ]:"" );
        blockUrlEdit = true;
      } else if ( ret == `url ) {
        if ( blockUrlEdit ) {
          blockUrlEdit = false;
        } else {
          if ( serverId != 0 ) {
            UI::ChangeWidget( `id(`server), `Value, 0 );
          }
        }
      } else if ( ret == `expert ) {
          string url = getUrl( "" );
          if ( size( url ) > 0 ) {
            UI::ChangeWidget( `id(`url), `Value, url );
          }
      } else if ( ret == `automatic ) {
          SetupAutomatic();
      } else if ( ret == `abort && UI::ConfirmAbortUpdate(`painless) ) {
          return  `abort;
      } else if (ret == `next) {
          if ( serverId == 0 ) {
            server[ "url" ] = UI::QueryWidget( `id( `url ), `Value );
            you_server_list[ 0 ] = server;
          }
      
          string err = GetPatches();

          if ( size( err ) != 0 ) {
            y2error( "GetPatches err: %1", err );

            ret = `this;

            if ( err != "abort" ) {
              string msg = "";
              string details = Pkg::ErrorDetails();
              if ( err == "login" ) {
                msg = _("Login failed. Check that you have provided
the correct user name and password.
");
              } else if ( err == "media" ) {
                if ( cd_update ) {
                  msg = _("Initialization failed. Check that
you have inserted the correct CD.
");
                  details = Pkg::Error() + "\n" + details;
                } else {
	          msg = _("Initialization failed. Try again.
If failure continues, choose
another SuSE FTP/HTTP server.
");
                  details = Pkg::Error() + "\n" + details;
                }
              } else if ( err == "sig" ) {
                  msg = _("Signature check for patch info files failed.
Cannot load patch information.
");
                  ret = `this;
              
                  UI::ChangeWidget( `id( `reload ), `Value, true );              
              } else if ( err == "url" ) {
                  msg = _("URL is invalid.");
              } else {
                  msg = _("Patch information retrieval failed.");
                  details = err + "\n" + details;
              }

              UI::YouErrorPopup( msg, details );
            }
          } else {
            Pkg::YouSelectPatches();
          }
      } else {
        y2debug( "RET: %1", ret );
      }

  } until (ret == `back || ret == `next || ret == `again);

  y2debug("Return START: %1", ret );

  return ret;
}
