/**
 * File:	include/onlineupdate/suseservers.ycp
 * Package:	Online update
 * Summary:	/etc/suseservers routines
 * Authors:	Gabriele Strattner <gs@suse.de>
 *		Stefan Schubert <schubi@suse.de>
 *
 * $Id$
 *
 * Convert .etc.suseservers format from any agent to and from
 * map-based format used in online_update.
 *
 * any agent keeps data in list of maps:
 *  $[
 *    "path" : "/pub/Linux/mirrors/suse/ftp.suse.com/suse",
 *    "server" : "ftp.funet.fi",
 *    "type" : "ftp"
 *   ],
 *
 * online update keeps data in map:
 *   "ftp.funet.fi":["/pub/Linux/mirrors/suse/ftp.suse.com/suse", "ftp"],
 *
 * map read_suseservers()
 *	read /etc/suseservers and return map in "online update" format
 *
 * boolean write_suseservers(map serversmap)
 *	write /etc/suseservers from "online update" formatted map
 */

{

textdomain "online-update";

/**
 * Read .etc.suseservers, return map
 */
global define map read_suseservers () ``{
    map serversmap = $[];
    list serverslist = SCR::Read(.etc.suseservers);

    if (size (serverslist) <= 0) {
	return serversmap;
    }

    foreach (`entry, serverslist, ``{
	string server = lookup (entry, "server", "");
	string type = lookup (entry, "type", "");
	string spath = lookup (entry, "path", "");

	serversmap = add (serversmap, server, [ spath, type ]);
    });

    return serversmap;
}

global define string read_first_suseserver () ``{
    string server = "";
    list serverslist = SCR::Read(.etc.suseservers);

    if (size (serverslist) > 0)
    {
	map entry = select ( serverslist, 0, "" );
	server = lookup (entry, "server", "");
    }

    return server;
}

global define string read_first_suseserverkind () ``{
    string kind = "";
    list serverslist = SCR::Read(.etc.suseservers);

    if (size (serverslist) > 0)
    {
	map entry = select ( serverslist, 0, "" );
	kind = lookup (entry, "type", "");
    }

    return kind;
}

/**
 * Write map to .etc.suseservers,
 * handle special cases: "ftp", "http" need "//"
 */
define boolean write_suseservers (map serversmap) ``{
    boolean retval = false;

    if (size (serversmap) <= 0) {
	return retval;
    }

    list serverslist = [];

    foreach (`key, `value, serversmap, ``{
	string server = key;
	string spath = select (value, 0, "");
	string type = select (value, 1, "");
	string sep = ":/";

	// ftp and http need double-slash

	if ( type == "ftp"
	     || type == "http"
	     || type == "HTTP"
	     || type == "FTP" ) {
	    sep = "://";
	}

	serverslist = add (serverslist,
		       $[ "path" : spath, "sep" : sep, "server" : server, "type" : type ]);
    });

    return SCR::Write(.etc.suseservers, serverslist);
}

/* EOF */
}
