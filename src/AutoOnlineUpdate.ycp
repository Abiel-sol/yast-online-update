/**
 * File:	modules/AutoOnlineUpdate.ycp
 * Package:	Configuration of AutoOnlineUpdate
 * Summary:	Data for configuration of AutoOnlineUpdate, input and output functions.
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 * Representation of the configuration of AutoOnlineUpdate.
 * Input and output routines.
 */

{

module "AutoOnlineUpdate";
textdomain "online-update";

import "Report";
import "Summary";


/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
global boolean write_only = false;

/**
 * time of execution (minute)
 */
global integer minute = -1;

/**
 * time of execution (hour)
 */
global integer hour = -1;

/**
 * online_update options
 */
global string options = "";

/**
 * Only get patches
 */
global boolean autoget = false;

/**
 * Auto update enabled
 */
global boolean enabled = false;

/**
 * Location of the cron file
 */
global string cronfile = "/etc/cron.d/yast2-online-update";



/**
 * Read all AutoOnlineUpdate settings
 * @return true on success
 */
global define boolean Read() ``{

    options = (string)SCR::Read( .sysconfig.onlineupdate.CMDLINE_OPTIONS );


    string cronjob = "";
    if (SCR::Read(.target.size, cronfile)!= -1 )
    {
        cronjob = (string)SCR::Read( .target.string, cronfile );
    }

    if ( size( cronjob ) > 0 ) {
        enabled = true;
        string h  = regexpsub( cronjob, "[0-9]+ ([0-9]+) ", "\\1" );
        string m = regexpsub( cronjob, "([0-9]+) ([0-9]+) ", "\\1" );
        hour = tointeger( h );
        minute = tointeger( m );
        if ( regexpmatch( cronjob, "-g" ) ) autoget = true;
    } else {
        hour = random( 24 );
        minute = random( 60 );
    }
    y2milestone("hour: %1, minutes: %2", hour, minute );
    return true;
}


/**
 * Write all AutoOnlineUpdate settings
 * @return true on success
 */
global define boolean Write() ``{

    string cronjob = sformat( "%1 %2 * * * root online_update %3", minute, hour, options );
    if ( autoget ) cronjob = cronjob + " -g";
    cronjob = cronjob + "\n";
    SCR::Write( .target.string, cronfile, cronjob );
    return true;
}

/**
 * Get all AutoOnlineUpdate settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global define boolean Import (map settings) ``{
    hour = settings["update_time", "hour"]:-1;
    minute = settings["update_time", "minute"]:-1;
    autoget = settings["autoget"]:false;
    enabled = settings["enable_autoupdate"]:false;

    return true;
}

/**
 * Dump the AutoOnlineUpdate settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global define map Export () ``{
	map settings = $[];
	map update_time = $[];
	update_time["hour"] = hour;
	update_time["minute"] = minute;
	settings["update_time"] = update_time;
	settings["autoget"] = autoget;
	settings["enable_autoupdate"] = enabled;

    return settings;
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global define string Summary() ``{
    // translators: Configuration summary text for autoyast
    string summary = "";

    string nc = Summary::NotConfigured ();
    summary = Summary::AddHeader(summary, _("Scheduled Online Update Enabled"));
    summary = Summary::AddLine(summary, enabled ? _("Yes") : _("No") );


    string hour_str = (hour>9) ? sformat("%1", hour) : sformat("0%1", hour);
    string minute_str = (minute>9) ? sformat("%1", minute) : sformat("0%1", minute);

    string timestr = sformat(_("Daily at %1:%2"), hour_str, minute_str);

    summary = Summary::AddHeader(summary, _("Time of Scheduled Online Update?"));
    summary = Summary::AddLine(summary, (hour!=-1 && minute!= -1 ) ? timestr  : nc );

    summary = Summary::AddHeader(summary, _("Only Download Patches"));
    summary = Summary::AddLine(summary, autoget ? _("Yes") : _("No") );

    return summary;
}


/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global define map AutoPackages() ``{
    return $[ "install":[], "remove":[] ];
}

/* EOF */
}
