/*
 *************************************************************
 *
 *     YaST2      SuSE Labs                        -o)
 *     --------------------                        /\\
 *                                                _\_v
 *           www.suse.de / www.suse.com
 * ----------------------------------------------------------
 *
 * Author:        Gabriele Strattner <gs@suse.de>
 *
 * Purpose:
 *
 * Modify:
 *
 * external function:
 *
 *
 *************************************************************

 $Id$

*/

{
  // Testmode
  boolean test_mode    = lookup ( user_settings, "test_mode", false );
  // selected ftp server
  string ftp_server = lookup( user_settings, "ftp_server", "" );
  
  // check installation mode
  boolean auto_mode = lookup( user_settings, "ftp_auto", false );
  boolean continue_mode = lookup( user_settings, "ftp_continue", false );

  // prepare for inst_rpmcopy
  user_settings = add(user_settings, "post_install", true );
  map installMap = $[];
  installMap = add(installMap, "bootmode", "Harddisk" );
  user_settings = add(user_settings, "installMap", installMap );
  
  //////////////////////////////////////////////////////////////////////////////
  //                                  P O P U P S                             //
  //////////////////////////////////////////////////////////////////////////////

    

  ///////////////////////////////////////////////////////////////////////////////
  // MAIN:
  ///////////////////////////////////////////////////////////////////////////////


  term contents =
      // main dialog: 
      `VBox(
	    `VSpacing( 0.2 ),
	    `HBox(
		  `HWeight( 50,`VBox (`Left(`Label(_("Connected to"))),
				      `Left(`Label(`id(`id1),`opt(`outputField), "                          ")) )
			    ),
		  `HWeight( 50,`VBox(`Left(`Label(_("Status of connection"))),
				     `Left(`Label(`id(`id2),`opt(`outputField),  "                          ")) )
			    )
		  ),
	    `HBox(
		  `HWeight( 50,`VBox (`Left(`Label(_("Total connection time"))),
				      `Left(`Label(`id(`id3),`opt(`outputField), "                           ")) )
			    ),
		  `HWeight( 50,`VBox(`Left(`Label(_("Estimated time"))),
				     `Left(`Label(`id(`id4),`opt(`outputField), "                            ")) )
			    )
		  ),
	    `VSpacing(0.5),
	    `LogView(`id(`log),
		     "Information about the activities",
		     5,	// visible lines
		     100),	// lines to store,
	    `VSpacing( 0.2 )
	    );

  string help_text = "";

  // helptext  "main dialog online_update" 
  string help_part1 =  UI("<p>After connecting to SuSE server,
YaST2 will download all available patches.
This could take some time. Several details are shown.</p>");
  string help_part2 =  UI("<p>
Fields above show informations about the connection and
time of data transfer.
Box below displays data from ftp logfile. If something
goes wrong, please check this source of information. 
</p>");
  string help_part3 =  UI("<p>
If you decide to <b>Abort Update</b>, the download of
patches will be interrupted and the ftp connection 
closed. 
</p>");

  help_text = help_part1 + help_part2 + help_part3;
    
  // using SetContents (define in online_update.ycp)
  UI(`SetWizardContents(_("Connection and Data transfer"), contents, help_text, Args(0), Args(1) ));

  // TODO: get values from PKGINFO 
  UI(`ChangeWidget(`id(`id1), `Value, ftp_server) );  
  UI(`ChangeWidget(`id(`id2), `Value, _("active") ));
  UI(`ChangeWidget(`id(`id3), `Value, _("30:34:32") ));
  UI(`ChangeWidget(`id(`id4), `Value, _("56:34:45") ));


  // Fake getting of patches for test_mode
  integer test_id = 0;
  define FakeGetPatch( string patch) ``{
      integer counter = 0;
      string log = "";
      map result = $[];
      
      while (counter < 300)
      {
	  counter = counter + 1;
	  UI(`ChangeWidget(`id(`log), `LastLine, "Neue Zeile ........\n" ));
      }
      test_id = test_id + 1;
	 
      y2debug("ONLINE: Get patch %1 ( test_mode ): %2", patch, test_id != 3 );

      if (test_id == 3)
      {
	  result = add(result, "ok", false );
	  string msg =  sformat( "Download failed for patch %1.\nReasons are unknown.", patch );
	  result = add( result, "message", msg );
      }
      else
      {
	  result = add(result, "ok", true );
	  string msg = sformat("Download successful for patch %1.\n", patch );
	  result = add( result, "message", msg );
      }
      result = add(result, "progress", test_id*10);
      result = add(result, "continue", false );
      
      return result;
  };

  // get patches from ftp server
  define GetAllPatches( map new_patches ) ``{
      list ret_list = [];
      list patch_list = [];
      integer index = 0;
      boolean go_on = true;
      
      foreach( `patch, `patch_info, new_patches, ``{
	  patch_list = add(patch_list, patch);
      });

      while ( index < size(patch_list) && go_on )
      {
	  map result_map = $[];

	  if ( !test_mode )
	  {
	      result_map = PKGINFO( `ftpGetPatch( select(patch_list, index) ) );
	      y2debug("ONLINE: Get patch %1: %2", select(patch_list, index), retval );
	  }
	  else
	  {
	      result_map = FakeGetPatch( select(patch_list, index) );
	  }

	  if ( !lookup(result_map, "ok", false) )
	  {
	      string msg_str = sformat(UI(_("Can't get patch \"%1\" from
server \"%2\".
Try to get remaining patches.")), select(patch_list, index), ftp_server );
	      
	      UI(`DisplayMsgFtp( msg_str, _("Notify") ));
	      // TODO: Popup mit 2 Buttons OK -> weiter, Cancel Abbruch
	  }
	  else
	  {
	      // add patch to result list of successfully got patches
	      ret_list = add( ret_list, select(patch_list, index) );
	  }

          // put logging into LogView Widget
	  UI(`ChangeWidget(`id(`log), `LastLine, lookup(result_map, "message", "" )) ); 
	  index = index+1;

	  // Polling input to give the user a chance to stop the download  
	  any r = UI(`PollInput());

	  if ( r == `abort && UI(`DisplayMsgFtp( _("Download of patches will be stopped.
Continue to install already loaded patches" ), _("Warning")) ) )
	  {
	      go_on = false;
	  }
      };

      return ret_list;
  };

  
  
  define InstallPatches( list patch_list ) ``{
      list package_list = [];
      integer no = 1;
      
      foreach ( `patch, patch_list, ``{
	  if ( !test_mode )
	  {
	      package_list = PKGINFO(`ftpGetPackageList( patch ) );
	  }
	  else
	  {
	      package_list = ["/var/lib/YaST/patches/abdnf.rpm", "/var/lib/YaST/patches/yxcxc.rpm"];
	  }
	  
	  any ret = CallFunction(`inst_rpmcopy(false, false, package_list ));

	  y2debug("ONLINE: %1. call of inst_rpmcopy returns: %2", no, ret );
	  no = no+1;
    });
      if (ret == `abort )
      {
	  return `cancel;
      }

      return `ok;
  };

  //  
  // Several functions of PKGINFO return a map of result information, e.g. 
  // $[ "ok": "true", "continue": false, "progress":"20", "message":"Download successful" ]
  // (not all information is used on every call)
  //  
  map result_map = $[];
  map new_patches = $[];
  boolean go_on = true;
  boolean success = true;
  
  if ( !test_mode )
  {
      UI(`ChangeWidget(`id(`log), `LastLine, "Starting download of patch descriptions from ftp server.\n" ));

      result_map = PKGINFO(`ftpConnect());
      success = lookup( result_map, "ok", false );

      if (success)
      {
	  while (go_on)
	  {
              //get list of patches step by step
	      get_result = PKGINFO(`ftpGetPatchList( ));

	      go_on = lookup (result_map, "continue", false );
	      
	      UI(`ChangeWidget(`id(`log), `LastLine, lookup (result_map, "message", "" ) ));
	      //UI(`ChangeWidget(`id(`progress), `LastLine, lookup (result_map, "progress", 0 ) ));
	  }
	  
	  success = lookup( result_map, "ok", false );
      }
      else
      {
	  UI(`ChangeWidget(`id(`log), `LastLine, lookup (result_map, "message", "" ) )); 

	  UI(`DisplayMsgFtp(_("Connection to ftp server failed.
Please try to get connection to another SuSE ftp server.")));
	  return `back;  
      }
      
      if (success)
      {
	  new_patches = PKGINFO(`ftpNewPatchList( ));
      }
      else
      {
	  UI(`DisplayMsgFtp(_("Can't get patches from server.
Please try to get patches from another SuSE ftp server.")));
	  return `back;
      }

      PKGINFO(`ftpClose() );
  }
  else
  {
      UI(`ChangeWidget(`id(`log), `LastLine, "Starting download of patch descriptions from ftp server.\n" ));

      new_patches = $["patch-001":["rec", "Patch for NFS server", "03:56", "X"],
		      "patch-002":["rec", "Noch einweiterer patch", "02:56", " "],
		      "patch-003":["sec", "Security dfsdkfö", "02:12", "X"],
		      "patch-004":["sec", "Nochmal security", "02:01", "X"] ];
      UI(`ChangeWidget(`id(`log), `LastLine, "Download successful - got patch descriptions.\n" )); 
  }
		     
  if ( auto_mode )
  {
      // get the patches
      list got_patches = GetAllPatches( new_patches );

      if ( got_patches != `cancel )
      {
	  y2debug( "ONLINE: automatic mode, installing: %1", got_patches );

	  // go on and install all available patches in auto_mode
	 any ret = InstallPatches( got_patches );
	 return `next;
      }
      else
      {
	  //PKGINFO(`ftpCloseConnection());
	  return `abort;		// abort update
      }
  }
  else if ( !continue_mode )
  {
      // write new_patches to user_settings -> table input online_update_select
      user_settings = add(user_settings, "ftp_patches", new_patches );

      // prepare for second call in manual mode 
      user_settings = add(user_settings, "ftp_continue", true );
      
      if (test_mode)
      {
	  string log = sformat( "Wrote list of new patches to user_settings:\n %1", new_patches );
	  UI(`ChangeWidget(`id(`log), `LastLine, log ) );
      }
  
      // prepare for second call in manual mode 
      user_settings = add(user_settings, "ftp_continue", true );
  }
  else if ( continue_mode )
  {
      // get selected patches (written to user_settings from online_update_select)
      map install_patches = lookup( user_settings, "ftp_patches", $[] );

      list got_patches = GetAllPatches( install_patches );

      if ( got_patches != `cancel )
      {
	  y2debug( "ONLINE: manual mode, installing: %1", got_patches );

	  any r = UI(`UserInput());
	  if ( r == `next )
	  {
	      // install selected patches
	      any ret = InstallPatches( got_patches );
	      return `next;
	  }
	  else if ( r == `abort  && UI(`ConfirmAbortUpdate(`incomplete)) )
	      return `abort;
      }
      else
      {
	//PKGINFO(`ftpCloseConnection());
	  return `abort;		// abort update  
      }
  }
  else
  {
      y2error("online_update_load - mode not set");
      return `abort;
  }
	 
	 
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////  Loop for User Input ....
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  symbol ret = `next;

  repeat
      {
	  ret= UI(`UserInput());

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////  FINISH
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////
	  if ( ret == `abort && UI(`ConfirmAbortUpdate(`incomplete)) )
	      return `abort;
	
	  if (ret == `next)
	  {

	  }


	  ////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////  
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////

	  if ( ret == `back)
	  {

	  }

      } until (ret == `next || ret == `back || ret == `cancel);

  y2debug("online_update_load Return: %1", ret );
  return ret;
}



