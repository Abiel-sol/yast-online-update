/*
 *************************************************************
 *
 *     YaST2      SuSE Labs                        -o)
 *     --------------------                        /\\
 *                                                _\_v
 *           www.suse.de / www.suse.com
 * ----------------------------------------------------------
 *
 * Author:        Gabriele Strattner <gs@suse.de>
 *
 * Purpose:
 *
 * Modify:
 *
 * external function:
 *
 *
 *************************************************************

 $Id$

*/

{
  // Testmode
  boolean test_mode    = lookup ( user_settings, "test_mode", false );
  
  // selected ftp server
  string ftp_server = lookup( user_settings, "ftp_server", "" );
  
  // check installation mode
  boolean auto_mode 	= lookup( user_settings, "ftp_auto", false );
  boolean continue_mode = lookup( user_settings, "ftp_continue", false );

  // prepare for inst_rpmcopy
  user_settings = add(user_settings, "post_install", true );
  map installMap = $[];
  installMap 	= add(installMap, "bootmode", "Harddisk" );
  user_settings = add(user_settings, "installMap", installMap );

  // possible status information
  string ERROR = "error";
  string INSTALLED = "installed";
  string LOAD = "load";
  
  user_settings = add(user_settings, "ftp_ok", true );
  
  //////////////////////////////////////////////////////////////////////////////
  //                                  P O P U P S                             //
  //////////////////////////////////////////////////////////////////////////////

  define ShowProgress( integer percent )``{
      
      string progress = "";

      percent = (percent*30)/100;

      while ( percent > 0 )
      {
	  progress = progress + "I";
	  percent = percent - 1;
      }
      y2debug("PROGRESS: %1", progress );
      UI(`ChangeWidget(`id(`progress), `Value, progress ));
      
  };

  ///////////////////////////////////////////////////////////////////////////////
  // MAIN:
  ///////////////////////////////////////////////////////////////////////////////


  term contents =
      // main dialog: 
      `VBox(
	    `VSpacing( 0.2 ),
	    `HBox(
		  `HWeight( 50,`VBox(`Left(`Label(_("Connected to"))),
				     `Left(`Label(`id(`id1),`opt(`outputField), "                              ")) )
			    ),
		  `HWeight( 50,`VBox(`Left(`Label(_("Status of connection"))),
				     `Left(`Label(`id(`status),`opt(`outputField), "                              ")) )
			    )
		  ),
	    `HBox(
		  `HWeight( 50,`VBox(`Left(`Label(_("Total connection time"))),
				     `Left(`Label(`id(`id3),`opt(`outputField), "                              ")) )
			    ),
		  `HWeight( 50,`VBox(`Left(`Label(_("Progress"))),
				     `Left(`Label(`id(`progress),`opt(`outputField), "                              ")) )
			    )
		  ),
	    `VSpacing(0.5),
	    `LogView(`id(`log),
		     "Information about the activities",
		     5,		// visible lines
		     500),	// lines to store,
	    `VSpacing( 0.2 )
	    );

  string help_text = "";

  // helptext  "main dialog online_update" 
  string help_part1 =  UI(_("<p>After connecting to SuSE server,
YaST2 will download all available patches.
This could take some time. Several details are shown.</p>"));
  string help_part2 =  UI(_("<p>
Fields above show informations about the connection and
time of data transfer.
Box below displays data from ftp logfile. If something
goes wrong, please check this source of information. 
</p>"));
  string help_part3 =  UI(_("<p>
If you decide to <b>Abort Update</b>, the download of
patches will be interrupted. No patch will be installed.
The ftp connection will be closed. 
</p>"));

  help_text = help_part1 + help_part2 + help_part3;
    
  // using SetContents (define in online_update.ycp)
  UI(`SetWizardContents(_("Connection and Data transfer"), contents, help_text, Args(0), Args(1) ));

  // TODO: get values from PKGINFO 
  UI(`ChangeWidget(`id(`id1), `Value, ftp_server) );  
  UI(`ChangeWidget(`id(`status), `Value, _("closed") ));
  UI(`ChangeWidget(`id(`id3), `Value, _(".........") ));


  // Fake getting of patches for fake_mode (NOT USED)
  integer test_id = 0;
  define FakeGetPatch( string patch) ``{
      integer counter = 0;
      string log = "";
      map result = $[];
      
      while (counter < 100)
      {
	  counter = counter + 1;
	  UI(`ChangeWidget(`id(`log), `LastLine, "Neue Zeile ........\n" ));
      }
      test_id = test_id + 1;
	 
      y2debug("ONLINE: Get patch %1 ( fake_mode ): %2", patch, test_id != 3 );

      if (test_id == 3)
      {
	  result = add(result, "ok", false );
	  string msg =  sformat( "Download failed for patch %1.\nReasons are unknown.", patch );
	  result = add( result, "message", msg );
      }
      else
      {
	  result = add(result, "ok", true );
	  string msg = sformat("Download successful for patch %1.\n", patch );
	  result = add( result, "message", msg );
      }
      result = add(result, "progress", test_id*10);
      result = add(result, "continue", false );
      
      return result;
  };

  // get patches from ftp server
  define GetAllPatches( map new_patches ) ``{
      list ret_list = [];
      list patch_list = [];
      integer index = 0;
      boolean go_on = true;
      integer patch_no = 0;

      // connect
      
      map  result_map = PKGINFO(`ftpConnect());
      y2debug("ONLINE:  PKGINFO(`ftpConnect()): %1", result_map );
      UI(`ChangeWidget(`id(`log), `LastLine, lookup (result_map, "message", "" )+"\n" ));
      if (lookup( result_map, "ok", false )  )
      {
	  UI(`ChangeWidget(`id(`status), `Value, _("active")) );
      }
	  
      foreach( `patch, `patch_info, new_patches, ``{
	  // only get the patch if marked with "X" or "G" 
	  if ( select ( lookup(new_patches, patch, []), 3 ) == "X" || select ( lookup(new_patches, patch, []), 3 ) == "G")
	   {
	       patch_list = add(patch_list, patch);
	   }
      });
      patch_no = size(patch_list);
      
      while ( (index < patch_no) && go_on )
      {
	  map result_map = $[];
	  string patch =  select(patch_list, index);
	  y2debug("Status of patch %1: %2", patch, select( lookup(new_patches, patch, []), 3 ));
	  
	  result_map = PKGINFO( `ftpGetPatch( select(patch_list, index) ) );
	  y2debug("ONLINE: PKGINFO(ftpGetPatch( %1 )): %2", select(patch_list, index), lookup(result_map, "ok", false));

	  if ( !lookup(result_map, "ok", false) )
	  {
	      // set status to error
	      PKGINFO( `ftpChangePatchUpdateStatus( select(patch_list, index), ERROR ) );
	      y2debug("ONLINE:  PKGINFO( `ftpChangePatchUpdateStatus(%1, %2)", select(patch_list, index), ERROR );
	      user_settings = add(user_settings, "ftp_ok", false );
	       
	      // put logging into LogView Widget before showing popup
	      UI(`ChangeWidget(`id(`log), `LastLine, lookup(result_map, "message", "" )+"\n" ));
	      
	      string msg_str = sformat(UI(_("Can't get patch \"%1\" from
server \"%2\".
You may try to download remaining patches or
go on with installation of already got ones.
In manual mode click on Next to procced.")),
				       select(patch_list, index), ftp_server );
	      
	      any ret = UI(`DisplayMsgFtp( msg_str, _("Notify"), _("&Download"), _("&Install") ));

	      if (!ret)
	      {
		  go_on = false;
	      }
	  }
	  else if ( select ( lookup(new_patches, patch, []), 3 ) == "X" )
	  {
	      // patches marked with "X" will be installed
	      ret_list = add( ret_list, select(patch_list, index) );
	      // put logging into LogView Widget
	      UI(`ChangeWidget(`id(`log), `LastLine, lookup(result_map, "message", "" )+"\n" )); 
	  }

	  // Polling input to give the user a chance to stop the download  
	  any r = UI(`PollInput());
	  if ( r == `abort && UI(`DisplayMsgFtp( _("Download of patches will be stopped.
You may continue with installation of already
loaded patches or abort update completely." ), _("Warning"), _("&Install"), _("&Abort") )) )
	  {
	      go_on = false;
	  }
	  
	  index = index+1;
	  ShowProgress( (index*100)/patch_no );
      }

      // disconnect
      result_map = PKGINFO(`ftpDisconnect());
      y2debug("ONLINE:  PKGINFO(`ftpDisonnect()): %1", result_map );
      UI(`ChangeWidget(`id(`log), `LastLine, lookup (result_map, "message", "" )+"\n" ));
      if (lookup( result_map, "ok", false )  )
      {
	  UI(`ChangeWidget(`id(`status), `Value, _("closed")) );
      }
      
      return ret_list;
  };

  //
  // InstallPatches
  // call inst_rpmcopy for every patch with list of packages belonging to the patch
  //
  define InstallPatches( list patch_list ) ``{
      list package_list = [];
      string pre_info = "";
      integer no = 1;
      
      foreach ( `patch, patch_list, ``{
	  any|symbol ret = nil;
	  boolean go_on  = true;

	  package_list = PKGINFO(`ftpGetPackages( patch ) );
	  y2debug("ONLINE: PKGINFO(`ftpGetPackages( %1 )): %1", package_list );

	  pre_info = PKGINFO(`ftpGetPreInstallInformation(patch));

	  if ( pre_info != "" )
	  {
	      go_on = UI(`DisplayMsgFtp( pre_info, _("Warning"), _("&Install"), _("&Skip patch")));
	      y2debug( "RREETTURRN: %1", go_on);
	  }
	  if ( go_on )
	  {
	      ret = CallFunction(`inst_rpmcopy(false, false, package_list ));
	      y2debug("ONLINE: %1. call of inst_rpmcopy returns: %2", no, ret );
	      no = no+1;
	  }
	  // do not set error status - let patch status NEW
      
	  if (ret == `abort )
	  {
	       // set status to error
	      PKGINFO( `ftpChangePatchUpdateStatus( patch, ERROR ) );
	      y2debug("ONLINE:  PKGINFO( `ftpChangePatchUpdateStatus(%1, %2)", patch, ERROR );
	      user_settings = add(user_settings, "ftp_ok", false );

	      return `cancel;
	  }
	  else if ( ret == `next )
	  {
	      // set status to INSTALLED
	      PKGINFO( `ftpChangePatchUpdateStatus( patch, INSTALLED ) );
	      y2debug("ONLINE:  PKGINFO( `ftpChangePatchUpdateStatus(%1, %2)", patch, INSTALLED );
	  }
      });
      
      return `ok;
  };

  //  
  // Several functions of PKGINFO return a map of result information, e.g. 
  // $[ "ok": "true", "continue": false, "progress":"20", "message":"Download successful" ]
  // (not all information is used on every call)
  //  
  map result_map = $[];
  map new_patches = $[];
  boolean go_on = true;
  boolean success = true;

  string connect_string = "Starting download of patch descriptions from " + ftp_server + ".\n";
  UI(`ChangeWidget(`id(`log), `LastLine, connect_string ));

  // connect
  result_map = PKGINFO(`ftpConnect());
  success = lookup( result_map, "ok", false );
  y2debug("ONLINE:  PKGINFO(`ftpConnect()): %1", result_map );

  UI(`ChangeWidget(`id(`log), `LastLine, lookup (result_map, "message", "" )+"\n" ));


  if (success)
  {
      UI(`ChangeWidget(`id(`status), `Value, _("active")) );
      while (go_on)
      {
	  //get list of patches step by step
	  result_map = PKGINFO(`ftpGetPatchList( ));
	  y2debug("ONLINE:  PKGINFO(`ftpGetPatchList()): %1", result_map );

	  go_on = lookup (result_map, "continue", false );

	  string message = lookup (result_map, "message", "" );
	  if ( message != "" )
	  {
	      UI(`ChangeWidget(`id(`log), `LastLine, message +"\n" ));
	  }

	  ShowProgress( lookup (result_map, "progress", 0 ) );
      }
	  
      success = lookup( result_map, "ok", false );
  }
  else
  {
      UI(`ChangeWidget(`id(`log), `LastLine, lookup (result_map, "message", "" ) )); 
	  
      UI(`DisplayMessage(_("Connection to ftp server failed.
Please try to get connection to another SuSE ftp server.")));
      return `back;  
  }

  if (success)
  {
	  new_patches = PKGINFO(`ftpNewPatchList( ));
	  y2debug( "ONLINE: Reading patch data: %1", new_patches );
  }
  else
  {
	  UI(`DisplayMessage(_("Can't get patches from server.
Please try to get patches from another SuSE ftp server.")));
	  return `back;
  }

  // disconnect 
  map disconnect_map = PKGINFO(`ftpDisconnect());

  y2debug( "ONLINE:  PKGINFO(`ftpDisconnect(): %1",  disconnect_map );
  
  if ( lookup(disconnect_map, "ok", false ) )
  {
	   UI(`ChangeWidget(`id(`status), `Value, _("closed")) );
  }

  string disconnect_message = lookup (disconnect_map, "message", "" );
  UI(`ChangeWidget(`id(`log), `LastLine, disconnect_message +"\n" ));
  
  if ( auto_mode )
  {
      // get the patches
      list install_patches = GetAllPatches( new_patches );

      if ( install_patches != `cancel )
      {
	  y2debug( "ONLINE: automatic mode, installing: %1", install_patches );

	 // go on and install all available patches in auto_mode
	 any ret = InstallPatches( install_patches );
	 return `next;
      }
      else
      {
	  any ret = PKGINFO(`ftpDisconnect());
	  y2debug("ONLINE:  PKGINFO(`ftpDisconnect()): %1", ret );
	  return `abort;		// abort update
      }
  }
  else if ( !continue_mode )
  {
      // write new_patches to user_settings -> table input online_update_select
      user_settings = add(user_settings, "ftp_patches", new_patches );
      y2debug( "Wrote list of new patches to user_settings: %1", new_patches );

      // prepare for second call in manual mode 
      user_settings = add(user_settings, "ftp_continue", true );

  }
  else if ( continue_mode )
  {
      // get selected patches (written to user_settings from online_update_select)
      map get_patches = lookup( user_settings, "ftp_patches", $[] );

      list install_patches = GetAllPatches( get_patches );

      if ( install_patches != `cancel )
      {
	  y2debug( "ONLINE: manual mode, installing: %1", install_patches );

	  while (true)
	  {
	      any r = UI(`UserInput());
	      if ( r == `next )
	      {
		  // install selected patches
		  any ret = InstallPatches( install_patches );
		  return `next;
	      }
	      else if ( r == `abort  && UI(`ConfirmAbortUpdate(`incomplete)) )
	      {
		  // set CloseUpdate status to false (installation NOT complete)
		  PKGINFO(`ftpCloseUpdate(false) );
		  PKGINFO(`ftpDisconnect());
		  y2debug("ONLINE:  PKGINFO(`ftpDisconnect()): %1", ret );
		  return `abort;	// abort update
	      }
	  }
      }
      else
      {
	  // do not set the CloseUpdate status -> no patch is installed
	  PKGINFO(`ftpDisconnect());
	  y2debug("ONLINE:  PKGINFO(`ftpDisconnect()): %1", ret );
	  return `abort;		// abort update  
      }
  }
  else
  {
      PKGINFO(`ftpDisconnect());
      y2debug("ONLINE:  PKGINFO(`ftpDisconnect()): %1", ret );
      y2error("online_update_load - mode not set");
      return `abort;
  }
	 
	 
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////  Loop for User Input ....
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  symbol ret = `next;

  repeat
      {
	  ret= UI(`UserInput());

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////  FINISH
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////
	  if ( ret == `abort && UI(`ConfirmAbortUpdate(`incomplete)) )
	  {
	      PKGINFO(`ftpDisconnect());
	      y2debug("ONLINE:  PKGINFO(`ftpDisconnect()): %1", ret );
	      return `abort;
	  }
	  if (ret == `next)
	  {

	  }

	  ////////////////////////////////////////////////////////////////////////////////////////////////////////
	  ////  
	  ////////////////////////////////////////////////////////////////////////////////////////////////////////

	  if ( ret == `back)
	  {
	      // RESET continue mode
	      user_settings = add(user_settings, "ftp_continue", false );
	  }

      } until (ret == `next || ret == `back || ret == `cancel);

  y2debug("online_update_load Return: %1", ret );
  return ret;
}



