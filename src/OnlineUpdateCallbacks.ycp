/**
 * Module:		OnlineUpdateCallbacks.ycp
 *
 * Authors:		Cornelius Schumacher <cschum@suse.de>
 *
 * Purpose:		provides the Callbacks for the online update
 */
{
    module "OnlineUpdateCallbacks";

    textdomain "online-update";

    import "OnlineUpdateDialogs";
    import "PackageCallbacks";
    import "Popup";

    integer total_progress	= 0;

    // if user aborted the installation
    boolean aborted	= false;

    // last callback called
    string last_callback	= "";

    // indentation of subtasks progress reports
    string indent		= "  ";

    /**
     * Callback for patch (resp. delta rpm) progress widget.
     * @param num position of progress widget (0 to 100)
     */
    global define boolean PatchProgressCallback (integer num) {

	last_callback	= "PatchProgressCallback";

        y2debug("PatchProgressCallback %1", num);

        if ( UI::WidgetExists( `id( `patchprogress ) ) ) {
          UI::ChangeWidget( `id( `patchprogress ), `Value, num );
        }

	if (aborted) return false;

        symbol ret =(symbol) UI::PollInput();

        if ((ret == `abort || ret == `cancel) &&
	    OnlineUpdateDialogs::ConfirmAbortUpdate (`incomplete)) {
	    aborted	= true;
	    return false;
        }
	return true;
    }

    global void MessageCallback( string patchname, string patchsummary, string message )
    {
	last_callback	= "MessageCallback";

	// handle all messages as post (OK only)
        list<map> patches = [
	    $[
		"name" : patchname,
		"summary" : patchsummary,
		"postinformation": message,
	    ]
	];

        OnlineUpdateDialogs::MessagePopup( patches, false );
    }

    /**
     * add a text to the installation progress log
     */
    global define void ProgressLog (string text) {
        y2debug ("ProgressLog %1", text);

        if ( UI::WidgetExists( `id( `log ) ) ) {
          UI::ChangeWidget( `id( `log ), `LastLine, text );
        }
    }

    /**
      Callback for executing YCP scripts in YOU.
    */
    global define boolean ExecuteYcpScriptCallback( string script )
    ``{
	last_callback	= "ExecuteYcpScriptCallback";
        y2milestone("ExecuteYcpScriptCallback");
        return (boolean)WFM::call( script, [] );
    }

    /**
      Callback for showing script execution progress in YOU.
    */
    global define boolean ScriptProgressCallback( integer percent )
    ``{
	last_callback	= "ScriptProgressCallback";
        y2milestone("ScriptProgressCallback");
        symbol ret = (symbol)UI::PollInput();

        if ( ret == `abort || ret == `cancel ) {
            return false;
        }
        return true;
    }

    /**
      Callback for starting download of a package.
     */
    global boolean StartProvide(string name, integer archivesize,boolean remote)
    {
	// progress log item (%1 is name of package)
	ProgressLog (sformat (_("Retrieving %1..."), name));
        if (UI::WidgetExists (`id (`patchprogress)))
	{
	    UI::ChangeWidget (`id (`patchprogress), `Label,
		// progress bar label
		_("Package Download Progress"));
	    UI::ChangeWidget (`id (`patchprogress), `Value, 0);
	}
	last_callback	= "StartProvide";
	return true;
    }

     /**
      Callback for starting installation of a package.
     */
    global boolean StartPackage(string name, string summary, integer
                                        installsize, boolean is_delete)
    {
	// progress log item (%1 is name of package, %2 is summary)
	ProgressLog( sformat( _("Installing %1: \"%2\" "), name, summary ) );
        if (UI::WidgetExists (`id (`patchprogress)))
	{
	    UI::ChangeWidget (`id (`patchprogress), `Label,
		// progress bar label
		_("Package Installation Progress"));
	    UI::ChangeWidget (`id (`patchprogress), `Value, 0);
	}
	last_callback	= "StartPackage";
	return true;
    }

    /**
     * Callback for finishing an action in the log
     * @param line true if we are adding to the end of line
     */
    global boolean FinishLine (boolean line)
    {
	// progress log item (=previous action finished correctly)
	ProgressLog ((line ? indent : "") + _("OK") + "\n" );
	return true;
    }


    /**
     * callback for 'package installed' action
     *
     *  return "" for ignore
     *  return "R" for retry
     *  return "C" for abort (not implemented !)
     */
    global string DonePackage (integer error, string reason) {
	string ret = PackageCallbacks::DonePackage (error, reason);
	if (ret == "")
	{
	    FinishLine (true);
	    total_progress  = total_progress + 1;
	    if ( UI::WidgetExists( `id( `progress ) ) ) {
		UI::ChangeWidget( `id( `progress ), `Value, total_progress);
	    }
	}
	last_callback	= "DonePackage";
	return ret;
    }

    /**
     * callback for 'package provided' action
     *
     *  return "" for ignore
     *  return "R" for retry
     *  return "C" for abort (not implemented !)
     */
    global string DoneProvide (integer error, string reason, string name) {
	string ret = PackageCallbacks::DoneProvide (error, reason, name);
	if (ret == "")
	{
	    if (last_callback == "StartProvide")
		FinishLine (false);
	    total_progress  = total_progress + 1;
	    if ( UI::WidgetExists( `id( `progress ) ) ) {
		UI::ChangeWidget( `id( `progress ), `Value, total_progress);
	    }
	}
	last_callback	= "DoneProvide";
	return ret;
    }

    /**
     * callback for start of delta download
     */
    global void StartDeltaDownload (string name, integer download_size) {

	// progress log item (%1 is name of delta RPM
	if (last_callback == "StartProvide")
	    ProgressLog ("\n" + indent);
	ProgressLog (sformat(_("Downloading delta RPM %1"), name));
        if (UI::WidgetExists (`id (`patchprogress)))
	{
	    UI::ChangeWidget (`id (`patchprogress), `Label,
		// progress bar label
		_("Delta RPM Download Progress"));
	    UI::ChangeWidget (`id (`patchprogress), `Value, 0);
	}
	last_callback	= "StartDeltaDownload";
    }

    /**
     * callback for delta download progress
     * @return boolean abort the download?
     */
    global boolean ProgressDeltaDownload (integer num) {

        y2debug ("ProgressDeltaDownload %1", num);
	boolean ret = PatchProgressCallback (num);
	last_callback	= "ProgressDeltaDownload";
	return ret;
    }

    /**
     * callback for problem during downloading delta
     */
    global void ProblemDeltaDownload (string description) {
	y2debug ("ProblemDeltaDownload: %1", description);
	ProgressLog (
	    "\n" + indent +
	    // progress log item (previous action failed(%1 is reason)
	    sformat(_("Failed to download delta RPM: %1"), description) +
	    "\n"
	);
	last_callback	= "ProblemDeltaDownload";
    }

    /*
     * callback for start of applying delta rpm
     */
    global void StartDeltaApply (string name) {
	// progress log item (%1 is name of delta RPM)
	ProgressLog (indent + sformat(_("Applying delta RPM: %1"), name));
        if (UI::WidgetExists (`id (`patchprogress)))
	{
	    UI::ChangeWidget (`id (`patchprogress), `Label,
		// progress bar label
		_("Delta RPM Application Progress"));
	    UI::ChangeWidget (`id (`patchprogress), `Value, 0);
	}
	last_callback   = "StartDeltaApply";
    }

    /**
     * progress of applying delta
     * (cannot be aborted)
     */
    global void ProgressDeltaApply (integer num) {
	y2debug ("ProgressDeltaApply: %1", num);
        if (UI::WidgetExists (`id (`patchprogress))) {
          UI::ChangeWidget (`id (`patchprogress), `Value, num);
        }
	last_callback   = "ProgressDeltaApply";
    }

    /**
     * callback for problem during aplying delta
     */
    global void ProblemDeltaApply (string description) {
	y2debug ("ProblemDeltaAply: %1", description);
	ProgressLog (
	    "\n" + indent +
	    // progress log item (previous action failed(%1 is reason)
	    sformat(_("Failed to apply delta RPM: %1"), description) +
	    "\n"
	);
	last_callback   = "ProblemDeltaApply";
    }

    /**
     * callback for start of downloading patch
     */
    global void StartPatchDownload (string name, integer download_size) {

	// progress log item (%1 is name of delta RPM)
	if (last_callback == "StartProvide")
	    ProgressLog ("\n" + indent);
	ProgressLog (sformat(_("Downloading patch RPM %1"), name));
        if (UI::WidgetExists (`id (`patchprogress)))
	{
	    UI::ChangeWidget (`id (`patchprogress), `Label,
		// progress bar label
		_("Patch RPM Download Progress"));
	    UI::ChangeWidget (`id (`patchprogress), `Value, 0);
	}
	last_callback   = "StartPatchDownload";
    }

    /**
     * callback for path download progress
     * @return boolean abort the download?
     */
    global boolean ProgressPatchDownload (integer num) {
        y2debug ("ProgressPatchDownload %1", num);
	boolean ret = PatchProgressCallback (num);
	last_callback	= "ProgressPatchDownload";
	return ret;
    }


    /**
     * callback for problem during aplying delta
     */
    global void ProblemPatchDownload (string description) {
	y2debug ("ProblemPatchDownload: %1", description);
	ProgressLog (
	    "\n" + indent +
	    // progress log item (previous action failed(%1 is reason)
	    sformat(_("Failed to download patch RPM: %1"), description) +
	    "\n"
	);
	last_callback   = "ProblemPatchDownload";
    }

    // finish of download/application of delta or patch download
    global void FinishPatchDeltaProvide () {
	FinishLine (true);
	last_callback   = "FinishPatchDeltaProvide";
    }

    /**
      Constructor
    */
    global define void RegisterOnlineUpdateCallbacks()
    ``{
	y2milestone ( "OnlineUpdateCallbacks constructor" );

	Pkg::CallbackStartProvide( "OnlineUpdateCallbacks::StartProvide" );
	Pkg::CallbackProgressProvide( "OnlineUpdateCallbacks::PatchProgressCallback" );
	Pkg::CallbackDoneProvide( "OnlineUpdateCallbacks::DoneProvide" );

	Pkg::CallbackStartPackage( "OnlineUpdateCallbacks::StartPackage" );
	Pkg::CallbackProgressPackage ("OnlineUpdateCallbacks::PatchProgressCallback");
	Pkg::CallbackDonePackage( "OnlineUpdateCallbacks::DonePackage" );

	Pkg::CallbackResolvableReport ("OnlineUpdateCallbacks::MessageCallback");

        Pkg::CallbackMediaChange ("PackageCallbacks::MediaChange");

	// delta download
	Pkg::CallbackStartDeltaDownload ("OnlineUpdateCallbacks::StartDeltaDownload");
	Pkg::CallbackProgressDeltaDownload ("OnlineUpdateCallbacks::ProgressDeltaDownload");
	Pkg::CallbackProblemDeltaDownload ("OnlineUpdateCallbacks::ProblemDeltaDownload");
	Pkg::CallbackFinishDeltaDownload ("OnlineUpdateCallbacks::FinishPatchDeltaProvide");

	// delta application
	Pkg::CallbackStartDeltaApply ("OnlineUpdateCallbacks::StartDeltaApply");
	Pkg::CallbackProgressDeltaApply ("OnlineUpdateCallbacks::ProgressDeltaApply");
	Pkg::CallbackProblemDeltaApply ("OnlineUpdateCallbacks::ProblemDeltaApply");
	Pkg::CallbackFinishDeltaApply ("OnlineUpdateCallbacks::FinishPatchDeltaProvide");

	// patch download
	Pkg::CallbackStartPatchDownload ("OnlineUpdateCallbacks::StartPatchDownload");
	Pkg::CallbackProgressPatchDownload ("OnlineUpdateCallbacks::ProgressPatchDownload");
	Pkg::CallbackProblemPatchDownload ("OnlineUpdateCallbacks::ProblemPatchDownload");
	Pkg::CallbackFinishPatchDownload ("OnlineUpdateCallbacks::FinishPatchDeltaProvide");

	// obsoleted callbacks
	Pkg::CallbackYouExecuteYcpScript ("OnlineUpdateCallbacks::ExecuteYcpScriptCallback");
        Pkg::CallbackYouScriptProgress ("OnlineUpdateCallbacks::ScriptProgressCallback");
    }

    /*
     * Refresh all sources with autorefresh enabled.
     * This function is a temporary solution for bug #154990
     */
    global define void RefreshAllSources () {

	y2milestone("Refreshing all sources...");
	Pkg::SourceStartManager(true);
	list <map<string,any> > all_sources = Pkg::SourceEditGet();

	// There are no sources, nothing to refresh
	if (all_sources == nil || size(all_sources)<1) {
	    y2warning("No sources defined, nothing to refresh...");
	    return;
	}
	foreach (map<string,any> one_source, all_sources, {
	    integer source_id          = (integer) one_source["SrcId"]:nil;
	    boolean source_autorefresh = (boolean) one_source["autorefresh"]:true;
	    boolean source_enabled     = (boolean) one_source["enabled"]:true;
	    if (source_id != nil && source_autorefresh == true && source_enabled == true) {
		y2milestone("Refreshing source: %1", source_id);
		Pkg::SourceRefreshNow(source_id);
	    }
	});
	y2milestone ("... refreshing done");
    }

    /**
     * Refresh sources given by argument
     */
    global define void RefreshSources (list<map> sources) {
	y2milestone("Refreshing sources...");
	foreach (map one_source, sources, {
	    integer source_id          = (integer) one_source["SrcId"]:nil;
	    boolean source_autorefresh = (boolean) one_source["autorefresh"]:true;
	    boolean source_enabled     = (boolean) one_source["enabled"]:true;
	    if (source_id != nil && source_autorefresh == true && source_enabled == true) {
		y2milestone("Refreshing source: %1", source_id);
		Pkg::SourceRefreshNow(source_id);
	    }
	});
	y2milestone ("... refreshing done");
    }
}
