/**
 * File:	online_update.ycp
 * Package:	Online update
 * Summary:	Main file
 * Authors:	Gabriele Strattner <gs@suse.de>
 *		Stefan Schubert <schubi@suse.de>
 *              Cornelius Schumacher <cschum@suse.de>
 *
 * $Id$
 */

{

  textdomain "online-update";

  import "Version";
  import "Wizard";
  import "Mode";
  import "OnlineUpdate";
  import "Directory";

  import "OnlineUpdateCallbacks";
  
  include "ui/common_popups.ycp";
  include "ui/common_functions.ycp";
  include "ui/common_messages.ycp";

  string version = Version::yast2;

  // dummy message, which will be used in the future, but have to be
  // translated into other languages.
  string d1 = _("Dialing....");
  string d2 = _("Hang up....");
  string d3 = _("Could not dial to the Internet. Check your settings.");
  string d4 = _("Could not dial to the Internet. Connect manually.");
  string d5 = _("Error occured while closing the connection to the Internet.");

  string d8 = _("Do not show this message again.");
  string d7 = _("Skip");
  string d11 = _("Continue");
  string d9 = _("Install");
  string d10 = sformat(_("The package \"%1\" is not a SuSE package.
Install anyway?
"), d9 );
  string d12 = _("There is no connection to the Internet. Trying to connect.");

  string gpg_warning = _("Cannot check the packages because no GPG configuration
or key has been found. SuSE cannot guarantee that the
packages were created by SuSE.
");


  //
  // Mode::test will be set, if menu is called with arg .test ( y2base menu '(.test)' qt )
  // or online_update is called directly ( /sbin/yast2 online_update '(.test)' )
  // test mode means: get the patches, but do not install (inst_rpmcopy runs with test mode)

  integer arg_n = 0;
  integer arg_max = size( WFM::Args() );

  while (arg_n < arg_max ) {
      if (WFM::Args(arg_n) == .test || WFM::Args(arg_n) == ".test")
      {
	  Mode::test = true;
      }
      else if (WFM::Args(arg_n) == .cd_default || WFM::Args(arg_n) == ".cd_default")
      {
	  Mode::youInstallMap["you_server"]	= "CD";		// text for output field
	  Mode::youInstallMap["you_serverkind"] = "cd";
	  OnlineUpdate::cd_update	=  true;
      }
      else if (WFM::Args(arg_n) == .auto.get || WFM::Args(arg_n) == ".auto.get")
      {
	  OnlineUpdate::you_auto_get	= true;
	  OnlineUpdate::you_auto	= true;
      }
      else if (WFM::Args(arg_n) == .auto.install || WFM::Args(arg_n) == ".auto.install")
      {
	  OnlineUpdate::you_auto_install = true;
	  OnlineUpdate::you_auto	 = true;
      }
      else if (WFM::Args(arg_n) == .nosigcheck || WFM::Args(arg_n) == ".nosigcheck")
      {
	  OnlineUpdate::signature_check = false;
      }
      else if ( WFM::Args(arg_n) == .url || WFM::Args(arg_n) == ".url" )
      {
          if ( arg_n + 1 < arg_max ) {
              OnlineUpdate::you_url = WFM::Args( arg_n + 1 );
          }
          arg_n = arg_n + 1;
      }
      else
      {
	  // batch kind like security,.....
	  OnlineUpdate::you_auto_batchkind = sformat("%1", WFM::Args(arg_n) );
	  y2milestone( "Getting patches for kind %1 only",  WFM::Args(arg_n) );
      }

      arg_n = arg_n + 1;
  }

  if ( OnlineUpdate::you_auto ) {
    string command = "online_update";
    if ( size( OnlineUpdate::you_url ) != 0 ) {
      command = command + " -u " + OnlineUpdate::you_url;
    }
    if ( !OnlineUpdate::signature_check ) {
      command = command + " -n";
    }
    if ( OnlineUpdate::you_auto_get ) {
      command = command + " -g";
    }
    if ( OnlineUpdate::you_auto_install ) {
      command = command + " -i";
    }
    command = command + " " + OnlineUpdate::you_auto_batchkind;
    
    y2debug( "COMMAND: %1", command );
    
    integer result = SCR::Execute( .target.bash, command );

    return result;
  }

  y2debug("ONLINE: Testmode %1", Mode::test );

  Wizard::CreateDialog();

  // show the special YOU image
  Wizard::SetImage( Read (.local.byte, Directory::themedir + "/current/online_update_long.png") );

UI(``{

    global define YouErrorPopup( string message, string details ) ``{

        if ( size( details ) == 0 ) return ErrorPopup( message );

        string detailsStringOn = _("&Details <<");
        string detailsStringOff = _("&Details >>");

        OpenDialog( `opt( `decorated ),
            `VBox(
                `HBox( `HSpacing( 0.5 ), `Left( `Heading( _("Error") ) ) ),
                `VSpacing( 0.2 ),
                `Label( message ),
                `ReplacePoint( `id( `rp ), `Empty() ),
                `HBox(
                    `PushButton( `id( `details ), detailsStringOff ),
                    `PushButton( `id( `ok ), OKButtonLabel() )
                )
            )
        );
        
        symbol ret = nil;
        boolean showDetails = false;
             
        while( ret != `ok ) {
            ret = UserInput();
            
            if ( ret == `details ) {
                if ( showDetails ) {
                    UI::ReplaceWidget( `id( `rp ), `Empty() );
                    UI::ChangeWidget( `id( `details ), `Label, detailsStringOff );
                } else {
                    UI::ReplaceWidget( `id( `rp ), `HBox( `HSpacing( 0.5 ),
                                                          `HWeight( 1, `RichText( details ) ),
                                                          `HSpacing( 0.5 ) )
                                                         );
                    UI::ChangeWidget( `id( `details ), `Label, detailsStringOn );
                }
                showDetails = !showDetails;
            }
        }
    }

    //  ConfirmAbortUpdate has same layout as/but different text than ConfirmAbort
   global define ConfirmAbortUpdate( symbol how_to ) ``{
	  string what_will_happen = "";

	  if ( how_to == `painless )
	  {
	      // Warning text for aborting the update before a patch is installed
	      what_will_happen = _("If you abort the installation now,
no patch will be installed.
An existing connection to the FTP/HTTP server will be closed.
Your installation will remain untouched.
");
	  }
	  else if ( how_to == `incomplete )
	  {
	      // Warning text for aborting if some patches are installed, some not
	      what_will_happen = _("Patch download and installation in progress.
If you abort the installation now, the update is incomplete.
Repeat the update, including the download, if desired.
");
	  }
	  else if ( how_to == `unusable )
	  {
	      // Warning text for aborting an installation during the install process
	      what_will_happen = _("If you abort the installation now,
at least one patch is not installed correctly.
You will need to do the update again.");
	  }
	  else
	  {
	      y2warning("Unknown symbol for what will happen when aborting - please correct in calling module" );
	  }

	  OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `HCenter(
					  `HSquash(
						   `VBox(
							 // Confirm user request to abort installation
							 `Left( `Label( _("Really abort Package Update?") ) ),
							 `Left( `Label( what_will_happen ) )
							 )
						   )
					  ),
				 `HBox(
				       // Button that will really abort the installation
				       `PushButton(`id(`really_abort), _("&Abort Update") ),
				       `HStretch(),

				       // Button that will continue with the installation
				       `PushButton(`id(`continue), `opt(`default), _("&Continue Update") )
				       ),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );

	  any ret = UserInput();
	  CloseDialog();

	  return (ret == `really_abort);
      };

   global define DisplayMsgYou( string message, string header, string yes_button, string no_button ) ``{
          OpenDialog(
                     `opt(`decorated),
                     `HBox(
                           `HSpacing(1),
                           `VBox(
				 `Left(`Heading( header)),
				 `VSpacing(0.2),
                                 `Label(message),
				 `HBox(`PushButton(`id(`yes), yes_button ),
				       `PushButton(`id(`no), `opt(`default), no_button )),
                                 `VSpacing(0.2)
                                 ),
                           `HSpacing(1)
                           )
                     );
          any ret = UserInput();
          CloseDialog();
          return (ret == `yes);
      };


   global define DisplayMsgYouOk( string message, string header, string ok_button ) ``{
          OpenDialog(
                     `opt(`decorated),
                     `HBox(
                           `HSpacing(1),
                           `VBox(
				 `Left(`Heading( header)),
				 `VSpacing(0.2),
                                 `Label(message),
				 `HBox(`PushButton(`id(`ok), `opt(`default), ok_button )),
                                 `VSpacing(0.2)
                                 ),
                           `HSpacing(1)
                           )
                     );
          any ret = UserInput();
          CloseDialog();
          return (ret == `ok);
      };

  });

   //
   // Display popup "Authorization" for business products
   // (the user must enter the registration code and the password).
   //
   global define DisplayRegistrationPopup(string reg_password, string reg_code,
					  string headline, string message ) ``{
       map ret_map = $[];

       UI::OpenDialog(
		  `opt(`decorated),
		  `HBox(
			`HSpacing(1),
			`VBox(
			      `Left(`Heading( headline )),
			      `VSpacing(0.2),
			      `Label( message ),
			      `Frame (_("Registration data"),
				      `VBox (
					     `HBox (
						    `HSpacing (0.5),
						    // text entry
						    `TextEntry (`id(`code), _("&Code:"), reg_code),
						    `HSpacing (0.5)
						    ),
					     `HBox (
						    `HSpacing (0.5),
						    // text entry
						    `TextEntry (`id(`password), _("&Password:"), reg_password),
						    `HSpacing (0.5)
						    ))),
			      `VSpacing(0.2),
			      `CheckBox(`id(`keep), _("&Keep registration data"), true ),
			      `VSpacing(0.2),
			      `HBox(`PushButton(`id(`login), `opt(`default), _("&Login") ),
				    `PushButton(`id(`abort), AbortButtonLabel() )
				    ),
			      `VSpacing(0.2)

			      ),
			`HSpacing(1)
			)
		  );

       any ret = UI::UserInput();

       if ( ret == `login )
       {
	   ret_map = add(ret_map, "reg_code", UI::QueryWidget(`id(`code), `Value));
	   ret_map = add(ret_map, "reg_password", UI::QueryWidget(`id(`password), `Value));
	   ret_map = add(ret_map, "keep_reg_data", UI::QueryWidget(`id(`keep), `Value));
	   ret_map = add(ret_map, "login", true );
       }
       else
       {
	   ret_map =  add(ret_map, "login", false);
       }

       UI::CloseDialog();

       return ret_map;
   };


  //
  // Check/get the registration and password in case of a business product
  //
  global define CheckAuthorization ( string you_server ) ``{

      boolean success = false;
      boolean go_on = true;
      map registration_map = $[];
      string login_status = "";
      string headline = _("Authorization");
      string msg_string = _("Enter the registration data.");
      string reg_password = "";
      string reg_code = "";

      // try to get the data from /etc/sysconfig/onlineupdate
      reg_password = SCR::Read(.sysconfig.onlineupdate.REG_PASSWORD);
      reg_code = SCR::Read(.sysconfig.onlineupdate.REG_CODE);

      while ( go_on )
      {
	  // show the registration data to allow changes
	  registration_map = DisplayRegistrationPopup( reg_password, reg_code,
							   headline, msg_string );

	  if ( lookup(registration_map, "login", false) )
	  {
	      // try to get connection to the server
	      reg_password = lookup( registration_map, "reg_password", "");
	      reg_code = lookup( registration_map, "reg_code", "");

	      login_status = Pkg::YouCheckAuthorization( you_server, reg_password, reg_code );

	      if ( login_status == "" ) 	// registration was successful
	      {
		  success = true;
		  go_on = false;

		  if ( lookup( registration_map, "keep_reg_data", false ))
		  {
		      // write registration data
		      SCR::Write(.sysconfig.onlineupdate.REG_PASSWORD,
				 lookup( registration_map, "reg_password", ""));
		      SCR::Write(.sysconfig.onlineupdate.REG_CODE,
				 lookup( registration_map, "reg_code", ""));

		      SCR::Write(.sysconfig.onlineupdate, nil);
		  }
		  else
		  {
		      // reset entries in registration file
		      SCR::Write(.sysconfig.onlineupdate.REG_PASSWORD, "");
		      SCR::Write(.sysconfig.onlineupdate.REG_CODE, "");

		      SCR::Write(.sysconfig.onlineupdate, nil);
		  }
	      }
	      else	// let the user try again to enter the correct registration/password
	      {
		  if ( login_status == "error_login" )
		  {
		      headline = ErrorMsg();
		      msg_string =  _("Authorization failed.
Check the registration data.
") ;
		  }
		  else
		  {
		      msg_string = _("Login to server failed.");

		      UI::ErrorPopup( msg_string );
		      go_on = false;
		      success = false;
		  }
	      }
	  }
	  else
	  {
	      // user has cancelled the registration dialog
	      go_on = false;
	      success = false;
	  }
      }
      y2milestone( "Return  CheckAuthorization: %1", success );

      return success;
  };

  if ( Mode::test ) {
    UI::YouErrorPopup( "Message", "This is a long message, whcih has almost no end." );
    return `test;
  }

  /*
   * Main dialog cycle
   *
   */

  list dialog = [
    [`online_update_start(false, true), `always ],
    [`online_update_select(false, true), `manual ],
    [`online_update_install(false, true), `always ],
    [`inst_suseconfig(false, false), `always ]
  ];

  integer id = 0;
  any result = `next;

  while ((id >= 0) && (id < size (dialog))) {

      term module_name = select( select( dialog, id, [] ), 0, `nomodule(false, false) );
      symbol module_mode = select( select( dialog, id, [] ), 1, `none );

      y2debug( "ONLINE: Module: %1 Mode: %2", module_name, module_mode );

      if ( id == size( dialog ) - 1 ) {
          UI::ChangeWidget(`id(`next), `Label,  FinishButtonLabel() );
      }

      if ( !OnlineUpdate::you_auto )
      {
	  result = WFM::CallFunction( module_name );
      }
      else if ( select( select(dialog, id, []), 1, `none ) == `always )
      {
	  result = WFM::CallFunction( module_name );
      }

      if (result == `again )
	  continue;
      else if (result == `cancel || result == `abort)
	  break;
      else if (result == `next || result == `auto )	// SuSEConfig returns `auto
	  id = id + 1;
      else if (result == `back)
	  id = id - 1;
      else if ( result == `finish )
	  id = size(dialog)-1;				// call last module

  }

  return UI::CloseDialog();
}
