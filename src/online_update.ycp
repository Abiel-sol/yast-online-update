/**
 * Summary:	Main file
 * Authors:	Gabriele Strattner <gs@suse.de>
 *		Stefan Schubert <schubi@suse.de>
 *              Cornelius Schumacher <cschum@suse.de>
 */

{

  textdomain "online-update";

  import "CommandLine";
  import "Confirm";
  import "Directory";
  import "FileUtils";
  import "Label";
  import "Mode";
  import "OnlineUpdate";
  import "OnlineUpdateCallbacks";
  import "PackageLock";
  import "Popup";
  import "Progress";
  import "Wizard";
  import "GetInstArgs";

  // return value is integer
  integer retval	= 1;

/**
 * Main sequence for Online Update
 */
define symbol OnlineUpdateSequence () {

  Wizard::CreateDialog();
  Wizard::SetDesktopIcon("online_update");
  // help text for online-update initialization
  Wizard::RestoreHelp (_("<p>The system is initializing the installation and update sources. Installation and update sources can be altered in the <b>Installation Source</b> module.</p>"));

  list<string> stages =  [
	    // progress stage label
	    _("Initialize the target system"),
	    // progress stage label
	    _("Refresh update sources"),
  ];
  list steps = [
	    // progress step label
	    _("Initializing the target system..."),
	    // progress step label
	    _("Refreshing update sources ..."),
	    // final progress step label
	    _("Finished")
  ];

  // dialog caption
  Progress::New(_("Initializing Online Update"), " ", 2, stages, steps, "");

  // check whether running as root
  // and having the packager for ourselves
  if (! Confirm::MustBeRoot () || ! PackageLock::Check ())
  {
      Wizard::CloseDialog ();
      return `cancel;
  }

  Progress::NextStage();

  // initialize target to import all trusted keys (#165849)
  Pkg::TargetInit( "/", false );

  Progress::NextStage ();

  OnlineUpdateCallbacks::RefreshAllSources();
  OnlineUpdateCallbacks::RegisterOnlineUpdateCallbacks();

  Progress::Finish();

  /*
   * Main dialog cycle
   *
   */

  list dialog = [
    [ "online_update_select",	[ GetInstArgs::Buttons(false, true) ] ],
    [ "online_update_install",	[ GetInstArgs::Buttons(false, true) ] ],
    [ "inst_suseconfig",	[ GetInstArgs::Buttons(false,false) ] ]
  ];

  integer id = 0;
  any result = `next;

  while ( ( id >= 0 ) && ( id < size( dialog ) ) ) {

      list page = dialog[ id ]:[];
      string module_name = page[ 0 ]:"";
      list module_args = page[ 1 ]:[];

      y2debug( "ONLINE: Module: %1 Args: %2", module_name, module_args);

      if ( id == (size( dialog ) - 1)) {
          Wizard::SetNextButton(`next, Label::FinishButton() );
      }

      result = WFM::CallFunction( module_name, module_args );

      if ( result == `nil ) return `cancel;

      if (result == `again )
	  continue;
      else if (result == `cancel || result == `abort)
	  break;
      else if (result == `next || result == `auto )// SuSEConfig returns `auto
	  id = id + 1;
      else if (result == `back)
	  id = id - 1;
      else if ( result == `finish )
          if ( !Mode::installation() && !Mode::update() )
	  {
	      id = size(dialog)-1;		// call last module
          }
	  else
	  {
              result = `next;
              break;
          }
  }

  Wizard::CloseDialog();

  if (OnlineUpdate::cd_update && OnlineUpdate::cd_source > -1)
  {
    Pkg::SourceFinishAll ();
  }

  retval	= 0;
  if (OnlineUpdate::restart_yast)
  {
    if (FileUtils::Exists (Directory::vardir + "/selected_patches.ycp"))
    {
	Popup::Message (OnlineUpdate::restart_message);
    }
    OnlineUpdate::restart_yast	= false;
    retval	= -42;// restart menu.ycp even if there are no other patches selected
  }
  else if (OnlineUpdate::reboot_needed)
  {
    Popup::Message (OnlineUpdate::reboot_message);
  }
  return `next;
}

  /**
   * command line handler for CD update (=> add CD as installation source)
   */
  define boolean CDUpdateHandler (map options ) {
    OnlineUpdate::cd_update	= true;
    OnlineUpdateSequence ();
    return true;
  }

  // the command line description map
  map cmdline = $[
    "id"		: "online_update",
    // translators: command line help text
    "help"		: _("Online Update module"),
    "guihandler"	: OnlineUpdateSequence,
    "actions"		: $[
	"cd_update" :$[
	    "handler"	: CDUpdateHandler,
	    // translators: command line help text for pam action
	    "help"	: _("Start Patch CD Update")
	],
    ],
    "mappings"		: $[
	"cd_update"	: []
    ]
  ];

  // first check for obsoleted arguments
  integer arg_n = 0;
  while (arg_n < size (WFM::Args())) {
    any arg = WFM::Args( arg_n );
    if ( arg == .cd_default || arg == ".cd_default" )
    {
	y2warning (".cd_default parameter is OBSOLETE, use cd_update instead.");
	OnlineUpdate::cd_update	= true;
    }
    else if ( arg == .auto.get || arg == ".auto.get" )
    {
	y2warning (".auto.get parameter for online_update is OBSOLETE, use zypper or rug instead.");
    }
    arg_n = arg_n + 1;
  }
  if (OnlineUpdate::cd_update) // obsolete .cd_default argument was used
    OnlineUpdateSequence ();
  else
    CommandLine::Run (cmdline);
  return retval;
}
