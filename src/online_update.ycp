/*
 *
 * Module:              online_update.ycp
 *
 * Author:      	Gabriele Strattner (gs@suse.de)
 *
 * Submodules:		online_update_start	
 *			online_update_load
 *			online_update_select
 *			online_update_load
 *			online_update_close 
 *
 * Purpose:		contains dialog loop for online update
 *			initialisation of PKGINFO
 *
 * Modify:
 *
 *
 * $Id$
 */

{
  textdomain "online_update";
      
  // includes for wizard dialog
  // include "ui/wizard_dialog.ycp";
  // include "ui/wizard_error.ycp";
  // include "ui/wizard_flow.ycp";
  // include "ui/wizard_message.ycp";
  // include "ui/wizard_misc.ycp";

  // UI(`CreateWizardDialog());
  
  // definition of map user_settings  
  map user_settings = $[];    

  
  //
  // test_mode will be set, if menu is called with arg .test ( y2bignfat menu '(.test)' qt )
  //
  // test_mode means: get the ftp-patches, but do not install (inst_rpmcopy runs with test_mode)
  
  integer arg_n = size(Args()) - 1;
  boolean test_mode = false;
  
  while (arg_n >= 0) {
      if (Args(arg_n) == .test) {
	  test_mode = true;
      }            
      arg_n = arg_n - 1;
  }
  user_settings = add( user_settings, "test_mode", test_mode );
  y2debug("ONLINE: Testmode %1", test_mode );

  
  // Menuentry for the YaST2 menu
  if (Args() == [ "get_menuentry" ]) 
    return [ "online_update", $[
			`menuentry    : UI(_("Online Update")),
			`arguments    : [ ],
			`widget       : `RichText(
				// 
				UI(_("Launch this module to get patches (online update).
A patch updates, improves or corrects your existing installation."))
				+
				UI(_("<p>You need to be logged in as <i>root</i> in order to do this.</p>"))), 
			`codefragment : nil ]
    ];


  UI(``{

       /**
       * Create a typical installation wizard dialog.
       */
      OpenDialog(
		 `opt(`defaultsize),
		 `VBox(
		       `ReplacePoint( `id(`image ), `Image( `suseheader, "SuSE") ),
		       `HBox(
			     `HWeight( 30, `ReplacePoint( `id(`helpSpace), `RichText(`id(`help), ""))),
			     `HSpacing(1),
			     `HWeight( 70, `VBox(
						 `VSpacing(0.2),
						 `Left(`Heading(`id(`title), _("YaST2\nInitializing ..."))),
						 `HVCenter(`ReplacePoint(`id(`contents), `Empty())),
						 `HBox(
						       // "back" button: Return to the previous dialog
						       `PushButton(`id(`back), _("&Back")),

						       `HCenter(
								// "abort" button: The installation will be aborted
								`ReplacePoint( `id(`rep_abort), `PushButton(`id(`abort), _("&Abort Installation")))
								),

						       // "next" button: Proceed to the next dialog
						       `ReplacePoint( `id(`rep_next), `PushButton(`id(`next), _("&Next")) )
						       ),
						 `VSpacing(0.2)
						 )
				       ),
			     `HSpacing(1)
			     )
		       )
		 );

      /*
       * Define how the general framework for the installation wizard should
       * look like. This Macro creates and show a dialog.
       */

      define SetWizardContents(string title, term contents, string helptext,
			      boolean has_back, boolean has_next) ``{
	ChangeWidget(`id(`back), `Enabled, has_back);
	ChangeWidget(`id(`next), `Enabled, has_next);
	ChangeWidget(`id(`help), `Value, helptext);
	ChangeWidget(`id(`title), `Value, title);
	ReplaceWidget(`id(`contents), contents);
	SetFocus( `id(`next) );
      };

    // This is a popup dialog for displaying (usually) error messages      
    define DisplayMessage(string message) ``{
	    // ok pushbutton: confirm the dialog
	OpenDialog(
	    `opt(`decorated),
	    `HBox(
		`HSpacing(1),
		`VBox(
		    `VSpacing(0.2),
		    `Label(message),
			// "OK" button: User confirmation
		    `PushButton(`id(`ok), `opt(`default), _("&OK")),
		    `VSpacing(0.2)
		    ),
		`HSpacing(1)
		)
	    );
	any ret = UserInput();
	CloseDialog();

	return ( ret == `ok );
    };

    
    /*
     * Are your sure? with possibiltity to specify default-Button ( values: `no_default, `yes_default )
     */

     define YesNoOpt(any message, string yes_button_message, string no_button_message, symbol def_symbol) ``{
	  term yes_button = `empty();
	  term no_button = `empty();
	  
	  if ( def_symbol == `no_default )
	  {
	      yes_button = `PushButton( `id(`yes),  yes_button_message );
	      no_button  = `PushButton( `id(`no_button), `opt(`default), no_button_message );
	  }
	  else
	  {
	      yes_button = `PushButton(`id(`yes), `opt(`default), yes_button_message);
	      no_button = `PushButton( `id(`no_button), no_button_message );
	  }
	  
          OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `Label(message),
				 `HBox(
				       yes_button,
				       `HSpacing(2),
				       no_button
				       ),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );
          any ret = UserInput();
          CloseDialog();
          return (ret == `yes);
      };
      
    // YES or NO
    define YesOrNo(any message, string yes_button_message, string no_button_message) ``{
      OpenDialog(`opt(`decorated),
	`HBox(`HSpacing(1),
	      `VBox(`VSpacing(0.2),
		    `Label(message),
		    `HBox(`PushButton(`id(`yes), `opt(`default), yes_button_message),
			  `HSpacing(2),
			  `PushButton( no_button_message )),
		    `VSpacing(0.2)),
	      `HSpacing(1)
	));
      any ret = UserInput();
      CloseDialog();
      return (ret == `yes);

    };
    
    //  ConfirmAbortUpdate has same layout as/but different text than ConfirmAbort
   define ConfirmAbortUpdate( symbol how_to ) ``{
	  locale|any what_will_happen = nil;

	  if ( how_to == `painless )
	  {
	      // Warning text for aborting the update before a patch is installed
	      what_will_happen = _( "If you abort the installation now,
no patch will be installed.
An existing connection to ftp server will be closed.
Your installation will remain untouched." );
	  }
	  else if ( how_to == `incomplete )
	  {
	      // Warning text for aborting if some patches are installed, some not
	      what_will_happen = _( "If you abort the installation now,
the patches are not yet downloaded and installed.
You will need to do the update again." );
	  }
	  else if ( how_to == `unusable )
	  {
	      // Warning text for aborting an installation during the install process
	      what_will_happen = _( "If you abort the installation now,
at least one patch is not installed correctly.
You will need to do the update again." );
	  }
	  else
	  {
	      y2warning("Unknown symbol for what will happen when aborting - please correct in calling module" );
	  }

	  OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `HCenter(
					  `HSquash(
						   `VBox(
							 // Confirm user request to abort installation
							 `Left( `Label( _("Really abort Package Update?") ) ),
							 `Left( `Label( what_will_happen ) )
							 )
						   )
					  ),
				 `HBox(
				       // Button that will really abort the installation
				       `PushButton(`id(`really_abort), _("&Abort Update") ),
				       `HStretch(),

				       // Button that will continue with the installation
				       `PushButton(`id(`continue), `opt(`default), _("&Continue Update" ) )
				       ),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );

	  any ret = UserInput();
	  CloseDialog();

	  return (ret == `really_abort);
      };


   define DisplayMsgFtp( string message, string header, string yes_button, string no_button ) ``{
          OpenDialog(
                     `opt(`decorated),
                     `HBox(
                           `HSpacing(1),
                           `VBox(
				 `Left(`Heading( header)),
				 `VSpacing(0.2),
                                 `Label(message),
				 `HBox(`PushButton(`id(`yes), `opt(`default), yes_button ),
				       `PushButton(`id(`no), `opt(`default), no_button )),
                                 `VSpacing(0.2)
                                 ),
                           `HSpacing(1)
                           )
                     );
          any ret = UserInput();
          CloseDialog();
          return (ret == `yes);
      };


   define DisplayMsgFtpOk( string message, string header, string ok_button ) ``{
          OpenDialog(
                     `opt(`decorated),
                     `HBox(
                           `HSpacing(1),
                           `VBox(
				 `Left(`Heading( header)),
				 `VSpacing(0.2),
                                 `Label(message),
				 `HBox(`PushButton(`id(`ok), `opt(`default), ok_button )),
                                 `VSpacing(0.2)
                                 ),
                           `HSpacing(1)
                           )
                     );
          any ret = UserInput();
          CloseDialog();
          return (ret == `ok);
      };
 

  });
  
  //
  // Show detailed information about the patch
  //
  define ShowPatchInfo ( string patch_name ) ``{

      map info_map = $[];

      info_map = PKGINFO( `ftpGetPatchInformation( patch_name ));

      string infotext = sformat("<p>%1</p><p>%2</p>", patch_name, lookup(info_map, "description", "") );

      list table_input = [];
      foreach (`pac, `info_list, lookup(info_map, "packages", $[] ), ``{
	  table_input = add(table_input, `item(`id(pac), pac, select(info_list, 1),
					       select(info_list, 2), select(info_list, 0)) );
      });

      UI( ``{ OpenDialog(`opt(`decorated ),
			 `HBox(`VSpacing(20),
			       `VBox(
				     `HSpacing(50),
				     `Left(`Heading( _("Patch information") )),
				     `VWeight( 4, `RichText(`id(`infotext), infotext )),
				     `VSpacing(0.5),
				     `VWeight( 4, `Table(`id(`table_pac),`opt(`hvstretch), 
							 `header( _("Name"), _("Installed"), _("New Version"), _("Description") ),
							 table_input
							 )),
				     `PushButton(`id(`ok_info), `opt(`default), _("&OK") )
				     )
			       )
			 );
      });
      UI(`SetFocus(`id(`ok_info)));
	  
      any r = UI(`UserInput());
      UI(`CloseDialog());
       
      return (r); 
  };

  //
  // Returns nice size string
  //
  define my_size_text (integer bytes) ``{

      if ( bytes == nil )
	  return "";
      
      float whole = tofloat (bytes) / 1024.0 / 1024.0;
      string unit = UI(_("MB"));

      // nnn.nn  999.99 MB
      
      string size_str = tostring (whole, 2);
      integer num = size(size_str);
      integer anz = 6 - num;

      if ( anz <= 0 )
      {
	  return ( size_str + " " + unit + " " );
      }  
      else if ( anz == 1 )
      {
	  return ( " " + size_str + " " + unit+ " " );
      }
      else
      {
	  return ( "  " + size_str + " " + unit+ " " );
      }  
  }; 

  // check architecture
  string architecture = SCR(`Read(.probe.architecture));
  user_settings = add (user_settings, "architecture", architecture );

  // check language
  string language = UI( `GetLanguage() );
  user_settings = add( user_settings, "language", language );


  
  /*
   * Main dialog cycle
   *
   */

  list dialog = [
		 [`online_update_start(false, true), 		`always ],
		 [`online_update_load(true, true),	 	`always ],
		 [`online_update_select(false, true), 		`manual ],
		 [`online_update_load(false, true), 		`manual ],
		 [`inst_suseconfig(false, true), 		`always ],
		 [`online_update_close(false, true), 		`always ]
		 
  ];

  /* 
   *  Additional used modules
   *  
   * "online_update_info" is called in module:
   * - online_update_start
   * - online_update_close
   * "inst_rpmcopy" is called in module:
   * - online_update_load
   *
   */
  
  integer id = 0;
  any result = `next;

  while ((id >= 0) && (id < size (dialog))) {

      symbol module_mode =  select( select(dialog, id), 1);
      y2debug( "ONLINE: Module: %1 Mode: %2", select( select(dialog, id), 0), select( select(dialog, id), 1) );

      if ( lookup ( user_settings, "ftp_updated_packages", 0 ) > 0 ||
	   select(select(dialog, id), 0 ) != `inst_suseconfig(false, true) )
      {
	  // call all modules in manual mode 
	  if ( !lookup(user_settings, "ftp_auto", true ) )
	  {
	      result = CallFunction(select(select(dialog, id), 0 ));
	  }
	  else if (  select( select(dialog, id), 1) == `always )
	  {
	      result = CallFunction(select(select(dialog, id), 0 ));
	  }
      }

      if (result == `again )
	  continue;
      else if (result == `cancel || result == `abort)
	  break;
      else if (result == `next || result == `auto )	// SuSEConfig returns `auto
	  id = id + 1;
      else if (result == `back)
	  id = id - 1;
      else if ( result == `finish )
	  break;

  }
  
  return UI(`CloseDialog());

}
