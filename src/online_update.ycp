/*
 *
 * Module:              online_update.ycp
 *
 * Author:      	Gabriele Strattner (gs@suse.de)
 *
 * Submodules:		online_update_start	
 *			online_update_load
 *			online_update_select
 *			online_update_load
 *			online_update_close 
 *
 * Purpose:		contains dialog loop for online update
 *
 * Modify:
 *
 *
 * $Id$
 */

{
  textdomain "online_update";
  
  Include (`yast_version());
  string version = yast_version ();

  include "ui/wizard_dialog.ycp";
  include "ui/common_popups.ycp";
  include "ui/common_functions.ycp";
  include "ui/common_messages.ycp";

  UI(`CreateWizardDialog());

  // dummy message, which will be used in the future, but have to be
  // translated into other languages.
  string d1 = UI(_("Dailing...."));
  string d2 = UI(_("Hang up...."));
  string d3 = UI(_("Could not dial to internet. Please check your settings."));
  string d4 = UI(_("Could not dial to internet. Please connect manually."));
  string d5 = UI(_("Error occured while closing connection to internet."));

  string d8 = UI(_("Do not show this message again."));
  string d7 = UI(_("Skip"));
  string d11 = UI(_("Continue"));
  string d9 = UI(_("Install"));
  string d10 = sformat(UI(_("The package \"%1\" is not a SuSE package.\nShould  I install nevertheless ?")), d9 );
  string d12 = UI(_("There is no connection to internet. Trying to connect."));

  string gpg_warning = UI(_("Cannot check the packages cause there has not be found\nany PGP configuration or key. So SuSE cannot guarantee that \nthe packages are created by SuSE"));
  
  
  // definition of map user_settings  
  map user_settings = $[];    

  
  //
  // test_mode will be set, if menu is called with arg .test ( y2bignfat menu '(.test)' qt )
  // or online_update is called directly ( /sbin/yast2 online_update '(.test)' ) 
  // test_mode means: get the ftp-patches, but do not install (inst_rpmcopy runs with test_mode)
  
  integer arg_n = size(Args()) - 1;
  boolean test_mode = false;
  
  while (arg_n >= 0) {
      if (Args(arg_n) == .test) {
	  test_mode = true;
      }
      else if (Args(arg_n) == .cd_default) {
	  user_settings = add( user_settings, "ftp_server", "CD" );
	  user_settings = add( user_settings, "cd_update", true );
      }
	  
      arg_n = arg_n - 1;
  }
  user_settings = add( user_settings, "test_mode", test_mode );
  y2debug("ONLINE: Testmode %1", test_mode );
  y2debug("ONLINE: YaST2-version %1", version );  

  
UI(``{
    
    //  ConfirmAbortUpdate has same layout as/but different text than ConfirmAbort
   global define ConfirmAbortUpdate( symbol how_to ) ``{
	  string what_will_happen = "";

	  if ( how_to == `painless )
	  {
	      // Warning text for aborting the update before a patch is installed
	      what_will_happen = _("If you abort the installation now,
no patch will be installed.
An existing connection to ftp server will be closed.
Your installation will remain untouched.");
	  }
	  else if ( how_to == `incomplete )
	  {
	      // Warning text for aborting if some patches are installed, some not
	      what_will_happen = _("If you abort the installation now,
the patches are not yet downloaded and installed.
You will need to do the update again.");
	  }
	  else if ( how_to == `unusable )
	  {
	      // Warning text for aborting an installation during the install process
	      what_will_happen = _("If you abort the installation now,
at least one patch is not installed correctly.
You will need to do the update again.");
	  }
	  else
	  {
	      y2warning("Unknown symbol for what will happen when aborting - please correct in calling module" );
	  }

	  OpenDialog(
		     `opt(`decorated),
		     `HBox(
			   `HSpacing(1),
			   `VBox(
				 `VSpacing(0.2),
				 `HCenter(
					  `HSquash(
						   `VBox(
							 // Confirm user request to abort installation
							 `Left( `Label( _("Really abort Package Update?") ) ),
							 `Left( `Label( what_will_happen ) )
							 )
						   )
					  ),
				 `HBox(
				       // Button that will really abort the installation
				       `PushButton(`id(`really_abort), _("&Abort Update") ),
				       `HStretch(),

				       // Button that will continue with the installation
				       `PushButton(`id(`continue), `opt(`default), _("&Continue Update") )
				       ),
				 `VSpacing(0.2)
				 ),
			   `HSpacing(1)
			   )
		     );

	  any ret = UserInput();
	  CloseDialog();

	  return (ret == `really_abort);
      };


   global define DisplayMsgFtp( string message, string header, string yes_button, string no_button ) ``{
          OpenDialog(
                     `opt(`decorated),
                     `HBox(
                           `HSpacing(1),
                           `VBox(
				 `Left(`Heading( header)),
				 `VSpacing(0.2),
                                 `Label(message),
				 `HBox(`PushButton(`id(`yes), `opt(`default), yes_button ),
				       `PushButton(`id(`no), `opt(`default), no_button )),
                                 `VSpacing(0.2)
                                 ),
                           `HSpacing(1)
                           )
                     );
          any ret = UserInput();
          CloseDialog();
          return (ret == `yes);
      };


   global define DisplayMsgFtpOk( string message, string header, string ok_button ) ``{
          OpenDialog(
                     `opt(`decorated),
                     `HBox(
                           `HSpacing(1),
                           `VBox(
				 `Left(`Heading( header)),
				 `VSpacing(0.2),
                                 `Label(message),
				 `HBox(`PushButton(`id(`ok), `opt(`default), ok_button )),
                                 `VSpacing(0.2)
                                 ),
                           `HSpacing(1)
                           )
                     );
          any ret = UserInput();
          CloseDialog();
          return (ret == `ok);
      };

  });
  
  //
  // Show detailed information about the patch
  //
  global define ShowPatchInfo ( string patch_name ) ``{

      map info_map = $[];

      info_map = PKGINFO( `ftpGetPatchInformation( patch_name ));

      string infotext = lookup(info_map, "description", "");
      
      list table_input = [];
      foreach (`pac, `info_list, lookup(info_map, "packages", $[] ), ``{
	  table_input = add(table_input, `item(`id(pac), pac, select(info_list, 1),
					       select(info_list, 2), select(info_list, 0)) );
      });

      UI( ``{ OpenDialog(`opt(`decorated ),
			 `HBox(`VSpacing(20),
			       `VBox(
				     `HSpacing(60),
				     `Left(`Heading( _("Patch information") )),
				     `VWeight( 5,
					       `LogView(`id(`infotext),
							"",
							5,	// visible lines
							30)	// lines to store,
					       ),
				     `VSpacing(0.5),
				     `VWeight( 3, `Table(`id(`table_pac),`opt(`hvstretch), 
							 `header( _("Name"), _("Installed"), _("New Version"), _("Description") ),
							 table_input
							 )),
				     `PushButton(`id(`ok_info), `opt(`default), OKButtonLabel() )
				     )
			       )
			 );
      });
      UI(`ChangeWidget(`id(`infotext), `Value, infotext ));      
      UI(`SetFocus(`id(`ok_info)));
	  
      any r = UI(`UserInput());
      UI(`CloseDialog());
       
      return (r); 
  };

  // check architecture
  string architecture = SCR(`Read(.probe.architecture));
  user_settings = add (user_settings, "architecture", architecture );

  // check language
  string language = UI( `GetLanguage(true) );
  user_settings = add( user_settings, "language", language );

  // setting targetroot
  string targetroot            = SCR(`Read(.target.root));
  user_settings = add( user_settings, "targetroot", targetroot );  
  
  /*
   * Main dialog cycle
   *
   */

  list dialog = [
		 [`online_update_start(false, true), 		`always ],
		 [`online_update_load(true, true),	 	`always ],
		 [`online_update_select(false, true), 		`manual ],
		 [`online_update_load(false, true), 		`manual ],
		 [`inst_suseconfig(false, true), 		`always ],
		 [`online_update_close(false, true), 		`always ]
		 
  ];

  /* 
   *  Additional used modules
   *  
   * "online_update_info" is called in module:
   * - online_update_start
   * - online_update_close
   * "inst_rpmcopy" is called in module:
   * - online_update_load
   *
   */
  
  integer id = 0;
  any result = `next;

  while ((id >= 0) && (id < size (dialog))) {

      symbol module_mode =  select( select(dialog, id), 1);
      y2debug( "ONLINE: Module: %1 Mode: %2", select( select(dialog, id), 0), select( select(dialog, id), 1) );

      if ( lookup ( user_settings, "ftp_updated_packages", 0 ) > 0 ||
	   select(select(dialog, id), 0 ) != `inst_suseconfig(false, true) )
      {
	  // call all modules in manual mode 
	  if ( !lookup(user_settings, "ftp_auto", true ) )
	  {
	      result = CallFunction(select(select(dialog, id), 0 ));
	  }
	  else if (  select( select(dialog, id), 1) == `always )
	  {
	      result = CallFunction(select(select(dialog, id), 0 ));
	  }
      }

      if (result == `again )
	  continue;
      else if (result == `cancel || result == `abort)
	  break;
      else if (result == `next || result == `auto )	// SuSEConfig returns `auto
	  id = id + 1;
      else if (result == `back)
	  id = id - 1;
      else if ( result == `finish )
	  id = size(dialog)-1;				// call last module

  }
  
  return UI(`CloseDialog());

}
