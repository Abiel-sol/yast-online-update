/**
 * Summary:	Main file
 * Authors:	Gabriele Strattner <gs@suse.de>
 *		Stefan Schubert <schubi@suse.de>
 *              Cornelius Schumacher <cschum@suse.de>
 */

{

  textdomain "online-update";

  import "Confirm";
  import "CommandLine";
  import "Directory";
  import "FileUtils";
  import "Label";
  import "Mode";
  import "OnlineUpdate";
  import "OnlineUpdateCallbacks";
  import "PackageLock";
  import "Popup";
  import "Progress";
  import "SourceManager";
  import "Wizard";
  import "GetInstArgs";

  integer arg_n = 0;
  integer arg_max = size( WFM::Args() );
  boolean run_cmdline	= false;
  while (arg_n < arg_max ) {
      any arg = WFM::Args( arg_n );

      // start the 'Patch CD Update': add CD as installation source
      if ( arg == .cd_default || arg == ".cd_default" )
      {
	  OnlineUpdate::cd_update	=  true;
      }
      else if ( arg == .auto.get || arg == ".auto.get" )
      {
	  OnlineUpdate::you_auto_get	= true;
	  OnlineUpdate::you_auto	= true;
      }
      else if ( arg == .simple_mode || arg == ".simple_mode" || arg == "simple_mode")
      {
	  OnlineUpdate::simple_mode	=  true;
      }
      else
	  run_cmdline	= true;
      arg_n = arg_n + 1;
  }
  // this is only to show the generic message that CLI is not available (#249306, comment 5)
  if (run_cmdline)
  {
      CommandLine::Run ($["id" : "online_update"]);
      return 1;
  }

  // only download the patches - OBSOLETE
  if ( OnlineUpdate::you_auto ) {
    y2warning ("This usage of online_update.ycp is OBSOLETE, use rug instead");
    string command = "rug up -t patch";
    if ( OnlineUpdate::you_auto_get ) {
      command = command + " -d";
    }
    y2milestone ("command: %1", command );
    integer result = (integer)SCR::Execute( .target.bash, command );
    return result;
  }

  Wizard::CreateDialog();
  Wizard::SetDesktopIcon("online_update");
  // help text for online-update initialization
  Wizard::RestoreHelp (_("<p>The system is initializing the installation and update sources. Installation and update sources can be altered in the <b>Installation Source</b> module.</p>"));

  list<string> stages =  [
	    // progress stage label
	    _("Initialize the target system"),
	    // progress stage label
	    _("Refresh update sources"),
  ];
  list steps = [
	    // progress step label
	    _("Initializing the target system..."),
	    // progress step label
	    _("Refreshing update sources ..."),
	    // final progress step label
	    _("Finished")
  ];

  // dialog caption
  Progress::New(_("Initializing Online Update"), " ", 2, stages, steps, "");

  // check whether running as root
  // and having the packager for ourselves
  if (! Confirm::MustBeRoot () || ! PackageLock::Check ())
  {
      Wizard::CloseDialog ();
      return 1;
  }

  Progress::NextStage();

  // initialize target to import all trusted keys (#165849)
  Pkg::TargetInit( "/", false );

  Progress::NextStage ();

  OnlineUpdateCallbacks::RefreshAllSources();
  OnlineUpdateCallbacks::RegisterOnlineUpdateCallbacks();

  Progress::Finish();

  /*
   * Main dialog cycle
   *
   */

  list dialog = [
    [ "online_update_select",	[ GetInstArgs::Buttons(false, true) ] ],
    [ "online_update_install",	[ GetInstArgs::Buttons(false, true) ] ],
    [ "inst_suseconfig",	[ GetInstArgs::Buttons(false,false) ] ]
  ];

  integer id = 0;
  any result = `next;

  while ( ( id >= 0 ) && ( id < size( dialog ) ) ) {

      list page = dialog[ id ]:[];
      string module_name = page[ 0 ]:"";
      list module_args = page[ 1 ]:[];

      y2debug( "ONLINE: Module: %1 Args: %2", module_name, module_args);

      if ( id == (size( dialog ) - 1)) {
          Wizard::SetNextButton(`next, Label::FinishButton() );
      }

      result = WFM::CallFunction( module_name, module_args );

      if ( result == `nil ) return 1;

      if (result == `again )
	  continue;
      else if (result == `cancel || result == `abort)
	  break;
      else if (result == `next || result == `auto )// SuSEConfig returns `auto
	  id = id + 1;
      else if (result == `back)
	  id = id - 1;
      else if ( result == `finish )
          if ( !Mode::installation() && !Mode::update() )
	  {
	      id = size(dialog)-1;		// call last module
          }
	  else
	  {
              result = `next;
              break;
          }
  }

  Wizard::CloseDialog();

  // `back is strange, user can go back after installation...
  if (result == `abort || result == `cancel) return 0;

  if (OnlineUpdate::cd_update && OnlineUpdate::cd_source > -1)
  {
    SourceManager::SyncYaSTInstSourceWithZMD ();
    Pkg::SourceFinishAll ();
  }

  if (OnlineUpdate::restart_yast)
  {
    if (FileUtils::Exists (Directory::vardir + "/selected_patches.ycp"))
    {
	Popup::Message (OnlineUpdate::restart_message);
    }
    OnlineUpdate::restart_yast	= false;
    return -42; // restart menu.ycp even if there are no other patches selected
  }
  if (OnlineUpdate::reboot_needed)
  {
    Popup::Message (OnlineUpdate::reboot_message);
  }
  return 0;
}
